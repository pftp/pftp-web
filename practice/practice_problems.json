[[{"prompt": "Print the string \"hello\"", "hint": "The syntax to print the string \"lol\" is\n<pre>print \"lol\"\n</pre>\n", "solution": "print \"hello\"\n", "problem_dir": "q001", "test": "#pass\n", "expected": "hello\n"}, {"prompt": "Print the string \"i like chicken\"", "hint": "The syntax to print the string \"lol\" is\n<pre>print \"lol\"\n</pre>\n", "solution": "print \"i like chicken\"\n", "problem_dir": "q001", "test": "#pass\n", "expected": "i like chicken\n"}, {"prompt": "Print the string \"apples taste good\"", "hint": "The syntax to print the string \"lol\" is\n<pre>print \"lol\"\n</pre>\n", "solution": "print \"apples taste good\"\n", "problem_dir": "q001", "test": "#pass\n", "expected": "apples taste good\n"}, {"prompt": "Print the string \"mmm chocolate!\"", "hint": "The syntax to print the string \"lol\" is\n<pre>print \"lol\"\n</pre>\n", "solution": "print \"mmm chocolate!\"\n", "problem_dir": "q001", "test": "#pass\n", "expected": "mmm chocolate!\n"}], [{"prompt": "Define a function multiply_by_2(num) that takes in one number as input and returns the number multiplied by 2", "hint": "The syntax for the function add_5 is\n<pre>def add(num):\n  return num + 5\n</pre>\n", "solution": "def multiply_by_2(num):\n    return num * 2\n", "problem_dir": "q002", "test": "print multiply_by_2(5)\nprint multiply_by_2(10)\nprint multiply_by_2(12)\nprint multiply_by_2(3)\n", "expected": "10\n20\n24\n6\n"}, {"prompt": "Define a function multiply_by_3(num) that takes in one number as input and returns the number multiplied by 3", "hint": "The syntax for the function add_5 is\n<pre>def add(num):\n  return num + 5\n</pre>\n", "solution": "def multiply_by_3(num):\n    return num * 3\n", "problem_dir": "q002", "test": "print multiply_by_3(5)\nprint multiply_by_3(10)\nprint multiply_by_3(12)\nprint multiply_by_3(3)\n", "expected": "15\n30\n36\n9\n"}, {"prompt": "Define a function multiply_by_4(num) that takes in one number as input and returns the number multiplied by 4", "hint": "The syntax for the function add_5 is\n<pre>def add(num):\n  return num + 5\n</pre>\n", "solution": "def multiply_by_4(num):\n    return num * 4\n", "problem_dir": "q002", "test": "print multiply_by_4(5)\nprint multiply_by_4(10)\nprint multiply_by_4(12)\nprint multiply_by_4(3)\n", "expected": "20\n40\n48\n12\n"}, {"prompt": "Define a function multiply_by_5(num) that takes in one number as input and returns the number multiplied by 5", "hint": "The syntax for the function add_5 is\n<pre>def add(num):\n  return num + 5\n</pre>\n", "solution": "def multiply_by_5(num):\n    return num * 5\n", "problem_dir": "q002", "test": "print multiply_by_5(5)\nprint multiply_by_5(10)\nprint multiply_by_5(12)\nprint multiply_by_5(3)\n", "expected": "25\n50\n60\n15\n"}], [{"prompt": "Given a list of words, write a function called get_word_counts(list_of_words) that returns a dictionary of the word counts of the list of words. Ex: get_word_counts([\"hello\", \"my\", \"name\", \"is\", \"joe\", \"hello\", \"joe\"]) = {\"hello\": 2, \"my\": 1, \"name\": 1, \"is\": 1, \"joe\": 2}", "hint": "The syntax for the function add_5 is\n<pre>def add(num):\n  return num + 5\n</pre>\n", "solution": "def get_word_counts(list_of_words):\n    word_counts = {}\n    for word in list_of_words:\n        if word not in word_counts:\n            word_counts[word] = 0\n        word_counts[word] += 1\n    return word_counts\n", "problem_dir": "q003", "test": "print get_word_counts(['hello', 'my', 'name', 'is', 'joe'])\nprint get_word_counts(['joe', 'joe', 'joe', 'joe'])\nprint get_word_counts(['hello', 'hello', 'my', 'my', 'name', 'name', 'is', 'is', 'joe', 'joe'])\n", "expected": "{'is': 1, 'joe': 1, 'my': 1, 'hello': 1, 'name': 1}\n{'joe': 4}\n{'is': 2, 'joe': 2, 'my': 2, 'hello': 2, 'name': 2}\n"}]]