[{"gen_template_vars": "res = {}", "prompt": "Write a function called add_three that takes three numbers as arguments and\nreturns their sum.", "problem_name": "add_three", "hint": "Here's code for the add_two function which takes two integers as\narguments and returns their sum:\n<pre>\ndef add_two(x, y):\n  return x + y\n</pre>", "solution": "def add_three(x, y, z):\n  return x + y + z", "test": "for i in range(-10, 10):\n  for j in range(-10, 10):\n    for k in range(-10, 10):\n      print add_three(i, j, k)\nprint add_three(-1234, 15, 2347)"}, {"gen_template_vars": "n = rand_int(2, 5)\nres = {\n  'xs': rand_string_list(20),\n  'n': n,\n  'nth': nth(n)\n}", "prompt": "Write a function called capitalize_every_{{ nth }}_letter that takes a string as\nits argument and returns a new version of it with every {{ nth }} letter in it\ncapitalized, starting with the first letter. Any non-letter characters should\nremain unchanged and should not be counted when determining every {{ nth }}\nletter.", "problem_name": "capitalize_every_nth_letter", "hint": "Here's code for lowercase_every_3rd_letter which takes a string as its\nargument and returns a new version of it with every 3rd letter\nlowercase, starting with the first letter, and ignoring non-letter characters\nwhen counting:\n<pre>\ndef lowercase_every_3rd_letter(s):\n  res = ''\n  count = 0\n  alphabet = 'abcdefghijklmnopqrstuvwxyz'\n  for char in s:\n    if char in alphabet or char in alphabet.upper():\n      if count % 3 == 0:\n        res += char.lower()\n      else:\n        res += char\n      count += 1\n    else:\n      res += char\n  return res\n</pre>", "solution": "def capitalize_every_{{ nth }}_letter(s):\n  res = ''\n  count = 0\n  alphabet = 'abcdefghijklmnopqrstuvwxyz'\n  for char in s:\n    if char in alphabet or char in alphabet.upper():\n      if count % {{ n }} == 0:\n        res += char.upper()\n      else:\n        res += char\n      count += 1\n    else:\n      res += char\n  return res", "test": "print capitalize_every_{{ nth }}_letter('')\nfor x in {{ xs }}:\n  print capitalize_every_{{ nth }}_letter(x)"}, {"gen_template_vars": "x = rand_letter()\ny = rand_word_list(20)\nfor i, word in enumerate(y):\n  if random() < 0.5:\n    y[i] = x + word\nres = {\n  'x' : x,\n  'y' : y\n}", "prompt": "Write a function called starts_with_{{ x }} that takes a string as an argument and returns True if and only if the string starts with the character {{ x }}. Take capitalization into account.", "problem_name": "str_starts_with_x", "hint": "Here's code for the ends_with_H function which takes a string as an argument and\nreturns True if and only if it ends with the character 'H'.\n<pre>\ndef ends_with_H(s):\n  if len(s) < 1:\n    return False\n  return s[-1] == 'H'\n</pre>", "solution": "def starts_with_{{ x }}(s):\n  if len(s) > 0 and s[0] == '{{ x }}':\n    return True\n  return False", "test": "print starts_with_{{ x }}('')\nfor s in {{ y }}:\n  print starts_with_{{ x }}(s)"}, {"gen_template_vars": "xs = rand_word_list(20)\nys = rand_word_list(20)\nfor i, word in enumerate(ys):\n  if random() < 0.5:\n    n = rand_int(1, len(word))\n    xs[i] = word[:n] + xs[i][n:]\nres = {\n  'xs': xs,\n  'ys': ys\n}", "prompt": "Write a function called max_prefix(x, y) that takes two strings x, y as arguments and returns the number of characters that are the same at the beginning of both x and y. For example, max_prefix(\"hello\", \"hero\") should return 2.", "problem_name": "max_prefix", "hint": "Here's code for max_suffix(x, y) which takes two strings x, y as arguments and returns the number of characters that are the same at the end of both x and y:\n<pre>\ndef max_suffix(x, y):\n  for i in range(1, len(x)+1):\n    if i > len(y):\n      break\n    if x[-i] != y[-i]:\n      return i - 1\n  return len(y)\n</pre>", "solution": "def max_prefix(x, y):\n  for i in range(len(x)):\n    if i >= len(y):\n      break\n    if x[i] != y[i]:\n      return i\n  return len(y)", "test": "print max_prefix('abcd', 'abcde')\nprint max_prefix('abcde', 'abcd')\nprint max_prefix('abcd', 'abcd')\nfor x in {{ xs }}:\n  for y in {{ ys }}:\n    print max_prefix(x, y)"}, {"gen_template_vars": "n = rand_int(3, 50)\nres = {\n  'x' : rand_int_list(1000),\n  'n' : n\n}", "prompt": "Write a function called list_multiply_{{ n }} that takes a list of integers as\nan argument and returns a list of each of its elements multiplied by {{ n }}.", "problem_name": "list_multiply_n", "hint": "Here's code for the list_add_5 function which takes a list of integers\nas an argument and returns a list of each of its elements added to 5:\n<pre>\ndef list_add_5(lst):\n  res = []\n  for num in lst:\n    res.append(num + 5)\n  return res\n</pre>", "solution": "def list_multiply_{{ n }}(lst):\n  res = []\n  for num in enumerate(lst):\n    res.append(num * {{ n }})\n  return res", "test": "print list_multiply_{{ n }}([])\nprint list_multiply_{{ n }}([23])\nprint list_multiply_{{ n }}({{ x }})"}, {"gen_template_vars": "res = {\n  'x': rand_int(3, 9),\n  'n': rand_int(100, 1000)\n}", "prompt": "Print the sum of the first {{ n }} multiples of {{ x }}.", "problem_name": "sum_multiples_num", "hint": "To help you get started, here's how to print the sum of the first 100 integers:\n<pre>\nsum = 0\nx = 0\nfor i in range(100):\n  x += 1\n  sum += x\nprint sum\n</pre>", "solution": "sum = 0\nx = 0\nfor i in range({{ n }}):\n  x += {{ x }}\n  sum += x\nprint sum", "test": "# pass"}, {"gen_template_vars": "res = {\n  'x' : rand_int_list(100)\n}", "prompt": "Write a function called max_list that takes a non-empty list of integers as an\nargument and returns the maximum number in the list.", "problem_name": "max_list", "hint": "Here's code for the min_list function which takes a list of integers as an\nargument and returns their minimum:\n<pre>\ndef min_list(lst):\n  min_num = float('inf')\n  for num in lst:\n    if num < min_num:\n      min_num = num\n  return min_num\n</pre>", "solution": "def max_list(lst):\n  max_num = -float('inf')\n  for num in lst:\n    if num > max_num:\n      max_num = num\n  return max_num", "test": "print max_list([23])\nprint max_list({{ x }})"}, {"gen_template_vars": "n = rand_int(2, 10)\nxs = rand_word_list(20)\nfor x in xs:\n  if random() < 0.5:\n    x = (n+1) * 'a'\nres = {\n  'n': n,\n  'xs': xs\n}", "prompt": "Write a function called longer_than_{{ n }} that takes a string as its argument\nand returns True if and only if it has more than {{ n }} characters.", "problem_name": "longer_than_n", "hint": "Here's code for shorter_than_5 which takes a string as its argument and returns\nTrue if and only if it has less than 5 characters:\n<pre>\ndef shorter_than_5(s):\n  return len(s) < 5\n</pre>", "solution": "def longer_than_{{ n }}(s):\n  return len(s) > {{ n }}", "test": "print longer_than_{{ n }}('')\nprint longer_than_{{ n }}({{ n }} * 'a')\nfor x in {{ xs }}:\n  print longer_than_{{ n }}(x)"}, {"gen_template_vars": "n = rand_int(2, 5)\nres = {\n  'xs': rand_string_list(20),\n  'n': n,\n  'nth': nth(n)\n}", "prompt": "Write a function called capitalize_every_{{ nth }} that takes a string as its\nargument and returns a new version of it with every {{ nth }} character\ncapitalized, starting with the first character. Any non-letter character should\nremain unchanged.", "problem_name": "capitalize_every_nth", "hint": "Here's code for lowercase_every_3rd which takes a string as its\nargument and returns a new version of it with every 3rd character\nlowercase, starting with the first character:\n<pre>\ndef lowercase_every_3rd(s):\n  res = ''\n  for i, char in enumerate(s):\n    if i % 3 == 0:\n      res += char.lower()\n    else:\n      res += char\n  return res\n</pre>", "solution": "def capitalize_every_{{ nth }}(s):\n  res = ''\n  for i, char in enumerate(s):\n    if i % {{ n }} == 0:\n      res += char.upper()\n    else:\n      res += char\n  return res", "test": "print capitalize_every_{{ nth }}('')\nfor x in {{ xs }}:\n  print capitalize_every_{{ nth }}(x)"}, {"gen_template_vars": "res = {\n  'x': rand_int(2, 20)\n}", "prompt": "Define a function multiply_by_{{ x }}(num) that takes in one number as input and returns the number multiplied by {{ x }}", "problem_name": "q002", "hint": "The syntax for the function add_5 is\n<pre>def add(num):\n  return num + 5\n</pre>", "solution": "def multiply_by_{{ x }}(num):\n    return num * {{ x }}", "test": "print multiply_by_{{ x }}(5)\nprint multiply_by_{{ x }}(10)\nprint multiply_by_{{ x }}(12)\nprint multiply_by_{{ x }}(3)"}, {"gen_template_vars": "res = {\n  'x': rand_word_list(10)\n}", "prompt": "Given a list of words, write a function called get_word_counts(list_of_words) that returns a dictionary of the word counts of the list of words. Ex: get_word_counts([\"hello\", \"my\", \"name\", \"is\", \"joe\", \"hello\", \"joe\"]) will return {\"hello\": 2, \"my\": 1, \"name\": 1, \"is\": 1, \"joe\": 2}. Then execute the line 'print get_word_counts({{ x }})'.", "problem_name": "q003", "hint": "The syntax for the function create_entry_for_each_word is below. This function creates an entry in the dictoinary for each word and has word: True for each word in the list.\n<pre>def create_entry_for_each_word(list_of_words):\n  words = {}\n  for word in list_of_words:\n    if word not in words:\n      words[word] = True\n  return words\n</pre>", "solution": "def get_word_counts(list_of_words):\n    word_counts = {}\n    for word in list_of_words:\n        if word not in word_counts:\n            word_counts[word] = 0\n        word_counts[word] += 1\n    return word_counts\n\nprint get_word_counts({{ x }})", "test": "print get_word_counts(['hello', 'my', 'name', 'is', 'joe'])\nprint get_word_counts(['joe', 'joe', 'joe', 'joe'])\nprint get_word_counts(['hello', 'hello', 'my', 'my', 'name', 'name', 'is', 'is', 'joe', 'joe'])"}, {"gen_template_vars": "res = {\n  'x': rand_word(),\n  'y': rand_word()\n}", "prompt": "Write a function called print_{{ x }}_return_{{ y }} that prints '{{ x }}' and\nthen returns '{{ y }}'. Call this function once to see what happens but don't\nprint the result of calling it.", "problem_name": "print_x_return_y", "hint": "Did you remember to call your function to test it at the end of the program?<br>\nHere's a function called print_hello_return_goodbye that prints \"hello\" and\nthen returns \"goodbye\":\n<pre>\ndef print_hello_return_goodbye():\n  print 'hello'\n  return 'goodbye'\n</pre>", "solution": "def print_{{ x }}_return_{{ y }}():\n  print '{{ x }}'\n  return '{{ y }}'\n\nprint_{{ x }}_return_{{ y }}()", "test": "print print_{{ x }}_return_{{ y }}()"}, {"gen_template_vars": "x = rand_word_list(20)\ny = rand_word_list(20)\nfor i, word in enumerate(y):\n  if random() < 0.5:\n    a = rand_int(0, len(word)-1)\n    b = rand_int(a, len(word)-1)\n    x[i] = word[a:b]\nres = {\n  'x' : x,\n  'y' : y\n}", "prompt": "Write a function called is_substring(x, y) that takes two strings x and y as arguments and returns True if and only if x is a substring of y.", "problem_name": "is_substring", "hint": "Here's code for the is_not_substring function that takes two strings x and y as\narguments and returns True if and only if x is not a substring of y.\n<pre>\ndef is_not_substring(x, y):\n  return x not in y\n</pre>", "solution": "def is_substring(x, y):\n  return x in y", "test": "for x in {{ x }}:\n  for y in {{ y }}:\n    print is_substring(x, y)"}, {"gen_template_vars": "xs = rand_int_list(20)\nlsts = rand_int_list_list(20)\nfor i, lst in enumerate(lsts):\n  if random() < 0.5:\n    xs[i] = max(lst) + 1\nres = {\n  'xs': xs,\n  'lsts' : lsts\n}", "prompt": "Write a function called greater_than_all(lst, x) that takes a list of integers lst and an integer x as arguments and returns True if and only if x is greater than every integer in lst.", "problem_name": "greater_than_all", "hint": "Here's code for less_than_all(x, y) that takes a list of integers lst and an\ninteger x as arguments and returns True if and only if x is less than every\ninteger in lst:\n<pre>\ndef less_than_all(lst, x):\n  for num in lst:\n    if x >= num:\n      return False\n  return True\n</pre>", "solution": "def greater_than_all(lst, x):\n  for num in lst:\n    if x <= num:\n      return False\n  return True", "test": "for x in {{ xs }}:\n  for lst in {{ lsts }}:\n    print greater_than_all(lst, x)"}, {"gen_template_vars": "res = {}", "prompt": "Write a function called is_factor that takes two integers x, y as arguments and\nreturns True if and only if x is a factor of y (that is, x divides y evenly with\nno remainder).", "problem_name": "is_factor", "hint": "Here's code for an is_even function which takes an integer x and returns True if\nand only if 2 is a factor of x:\n<pre>\ndef is_even(x):\n  return x % 2 == 0\n</pre>", "solution": "def is_factor(x, y):\n  return y % x == 0", "test": "for i in range(1, 100):\n  for j in range(1, 100):\n    print is_factor(i, j)"}, {"gen_template_vars": "res = {\n  'x' : rand_int_list(1000),\n  'n' : rand_int(3, 50)\n}", "prompt": "Write a function called sum_multiples_of_{{ n }} that takes a list of integers\nas an argument and returns the sum of all its numbers that are multiples of\n{{ n }}.", "problem_name": "sum_multiples_of", "hint": "Here's code for the sum_evens function which takes a list of integers as\nan argument and returns the sum of every even number:\n<pre>\ndef sum_evens(lst):\n  sum = 0\n  for num in lst:\n    if num % 2 == 0:\n      sum += num\n  return sum\n</pre>", "solution": "def sum_multiples_of_{{ n }}(lst):\n  sum = 0\n  for num in lst:\n    if num % {{ n }} == 0:\n      sum += num\n  return sum", "test": "print sum_multiples_of_{{ n }}([])\nprint sum_multiples_of_{{ n }}([23])\nprint sum_multiples_of_{{ n }}({{ x }})"}, {"gen_template_vars": "x = rand_int_list(100)\ni = rand_int(10, 90)\nn = rand_int(-50, 50)\nx[i] = n\nx[i+5] = n\nres = {\n  'x' : rand_int_list(100),\n  'n' : n\n}", "prompt": "Write a function called index_of that takes two arguments lst and x, where lst\nis a list of integers and x is an integer, and returns the first index of x\nin lst. If x is not in lst index_of should return -1. For example,\nindex_of([-4, 3, 47, 0], 47) should return 2.", "problem_name": "index_of", "hint": "Here's code for the index_of_23 function which takes a list of integers as\nan argument and returns the index of the first 23 it finds:\n<pre>\ndef index_of_23(lst):\n  idx = -1\n  for i, num in enumerate(lst):\n    if num == 23:\n      idx = i\n      break\n  return idx\n</pre>", "solution": "def index_of(lst, x):\n  idx = -1\n  for i, num in enumerate(lst):\n    if num == x:\n      idx = i\n      break\n  return idx", "test": "print index_of([], 2)\nprint index_of([23], 23)\nprint index_of([23], 5)\nprint index_of({{ x }}, {{ n }})"}, {"gen_template_vars": "res = {}", "prompt": "Write a function called is_prime that takes an integer as an argument and\nreturns True if and only if it is prime.", "problem_name": "is_prime", "hint": "Remember that 1 is not a prime number! Otherwise, a number is prime\nif its only factors are 1 and itself.", "solution": "def is_prime(x):\n  if x == 1:\n    return False\n  for i in range(2, x):\n    if x % i == 0:\n      return False\n  return True", "test": "for i in range(1, 1000):\n  print is_prime(i)"}, {"gen_template_vars": "res = {\n  'x' : rand_int_list(100)\n}", "prompt": "Write a function called average_list that takes a nonempty list of integers as\nan argument and returns their average (aka the mean).", "problem_name": "average_list", "hint": "Here's code for the average_three function which takes a three integers as an\nargument and returns their average:\n<pre>\ndef average_three(x, y, z):\n  return float(x + y + z) / 3\n</pre>", "solution": "def average_list(lst):\n  sum = 0\n  for num in lst:\n    sum += num\n  return float(sum) / len(lst)", "test": "print average_list([23])\nprint average_list({{ x }})"}, {"gen_template_vars": "x =  choice([\"Don't forget your manners, say \\\"Thank you\\\"!\",\n            \"\\\"Never say never\\\", my teacher hadn't ever said.\",\n            \"\\\"Yarr! I'm a pirate\\\" yelled the pirate\",\n            \"Isn't it too bad people don't read \\\"classics\\\" anymore?\",\n            \"\\\"It ain't so\\\", said Joe.\"])\nres = {\n  'x': x,\n  'y': x.replace('\"', '\\\\\"')\n}", "prompt": "Print the string \"{{ x }}\"", "problem_name": "hard_print", "hint": "The syntax to print the string \"Here's to your \"health\"\" is\n<pre>\nprint \"Here's to your \\\"health\\\"\"\n</pre>", "solution": "print \"{{ y }}\"", "test": "# pass"}, {"gen_template_vars": "res = {\n  'w1': rand_word(),\n  'w2': rand_word(),\n  'i1': rand_int(4, 1000),\n  'i2': rand_int(4, 1000)\n}", "prompt": "Create an empty dictionary called <b> word_counts </b>  and add the key '{{ w1 }}' to value {{ i1 }} and the key '{{ w2 }}' to value {{ i2 }}. Then write <b>print word_counts['{{ w2 }}']</b> which will look up the value of '{{ w2 }}'in the dictionary word_counts.", "problem_name": "q004", "hint": "Look at<a href=\"/cheatsheet.html\"> this cheatsheet </a> to find information about how to create dictionaries and set a key to a value in a dictionary.\n<br>\nDid you remember to set '{{ w1 }}' to {{ i1 }}? We're checking it...", "solution": "word_counts = {}\nword_counts['{{ w1 }}'] = {{ i1 }}\nword_counts['{{ w2 }}'] = {{ i2 }}\nprint word_counts['{{ w2 }}']", "test": "print word_counts['{{ w1 }}']"}, {"gen_template_vars": "res = {\n  'op0': choice(['+', '-', '*', '/', '%', '**']),\n  'op1': choice(['+', '-', '*', '/', '%', '**'])\n}", "prompt": "Write a function called do_arithmetic that takes arguments x, y, and z and returns (x {{ op0 }} y) {{ op1 }} z.", "problem_name": "q007", "hint": "To help you get started, below is a function called multiply that takes in two arguments a and b and returns a * b.\n<pre>\ndef multiply(a, b):\n   return a * b\n</pre>\n<br>\nMake sure you aren't printing anything extra or else we won't be able to validate your answer.", "solution": "def do_arithmetic(x, y, z):\n    return (x {{ op0 }} y) {{ op1 }} z", "test": "print do_arithmetic(3, 4, 5)\nprint do_arithmetic(-2, 100, -7)\nprint do_arithmetic(1, -4, 9999)"}, {"gen_template_vars": "res = {\n  'x': rand_word_list(10),\n  'y': rand_word_list(10),\n  'z': rand_word_list(10)\n}", "prompt": "Write a function called concat_three that takes three strings as arguments and\nreturns them concatenated together.", "problem_name": "concat_three", "hint": "Here's code for the concat_two function which takes two strings as\narguments and returns them concatenated together:\n<pre>\ndef concat_two(x, y):\n  return x + y\n</pre>", "solution": "def concat_three(x, y, z):\n  return x + y + z", "test": "for i in {{ x }}:\n  for j in {{ y }}:\n    for k in {{ z }}:\n      print concat_three(i, j, k)"}, {"gen_template_vars": "x = rand_letter()\ny = rand_word_list(20)\nfor i, word in enumerate(y):\n  if random() < 0.5:\n    idx = rand_int(0, len(word)-1)\n    y[i] = word[:idx] + x + word[idx:]\nres = {\n  'x' : x,\n  'y' : y\n}", "prompt": "Write a function called contains_{{ x }} that takes a string as an argument and returns True if and only if the string contains the character {{ x }}. Take capitalization into account.", "problem_name": "str_contains_x", "hint": "Here's code for the not_contains_H function which takes a string as an argument\nand returns True if and only if it does not contain the character 'H'.\n<pre>\ndef not_contains_H(s):\n  return 'H' not in s\n</pre>", "solution": "def contains_{{ x }}(s):\n  return '{{ x }}' in s", "test": "print contains_{{ x }}('')\nfor s in {{ y }}:\n  print contains_{{ x }}(s)"}, {"gen_template_vars": "n = rand_int(3, 50)\nres = {\n  'x' : rand_int_list(1000),\n  'n' : n,\n  'nth' : nth(n)\n}", "prompt": "Write a function called sum_every_{{ nth }} that takes a list of integers as an\nargument and returns the sum of every {{ nth }} number in the list, starting\nwith the first number.", "problem_name": "sum_every_nth", "hint": "Here's code for the sum_every_other function which takes a list of integers as\nan argument and returns the sum of every other number, starting with the first\nnumber:\n<pre>\ndef sum_every_other(lst):\n  sum = 0\n  for i, num in enumerate(lst):\n    if i % 2 == 0:\n      sum += num\n  return sum\n</pre>", "solution": "def sum_every_{{ nth }}(lst):\n  sum = 0\n  for i, num in enumerate(lst):\n    if i % {{ n }} == 0:\n      sum += num\n  return sum", "test": "print sum_every_{{ nth }}([])\nprint sum_every_{{ nth }}([23])\nprint sum_every_{{ nth }}({{ x }})"}, {"gen_template_vars": "x = choice(['haha', 'baabaa', 'xx', 'swingswing', 'lolo'])\nys = rand_string_list(20)\nfor i, y in enumerate(ys):\n  if random < 0.5:\n    for j in range(randint(0, 5)):\n      idx = randint(0, len(ys)-1)\n      ys[i] = y[:idx] + x * randint(1, 5) + y[idx+1:]\nres = {\n  'x': x,\n  'ys': ys\n}", "prompt": "Write a function called num_found_{{ x }} that takes a string as its argument\nand returns the maximum number of times '{{ x }}' occurs in that string, not\nincluding overlaps.", "problem_name": "num_found_x", "hint": "Here's the function is_bb_found_twice which takes a string as its argument and\nreturns True if and only if 'bb' occurs at least twice in that string,\nnot including overlaps.\n<pre>\ndef is_bb_found_twice(s):\n  bb_found_once = False\n  i = 0\n  while i <= len(s) - len('bb'):\n    if s[i:i+len('bb')] == 'bb':\n      if bb_found_once:\n        return True\n      bb_found_once = True\n      i += len('bb')\n    else:\n      i += 1\n  return False\n</pre>", "solution": "def num_found_{{ x }}(s):\n  count = 0\n  i = 0\n  while i <= len(s) - len('{{ x }}'):\n    if s[i:i+len('{{ x }}')] == '{{ x }}':\n      count += 1\n      i += len('{{ x }}')\n    else:\n      i += 1\n  return count", "test": "print num_found_{{ x }}('')\nfor y in {{ ys }}:\n  print num_found_{{ x }}(y)"}, {"gen_template_vars": "res = {\n  'xs': rand_sentence_list(20)\n}", "prompt": "Write a function called is_capitalized_sentence that takes a sentence string as\nits argument and returns True if and only if every one of its words (separated\nby spaces) starts with a capital letter.", "problem_name": "is_capitalized_sentence", "hint": "Here's code for is_lowercase_sentence which takes a sentence string as its\nargument and returns True if and only if every one of its wordsstarts with a\nlowercase letter:\n<pre>\ndef is_lowercase_sentence(s):\n  word_list = s.split()\n  for word in word_list:\n    if word[0] not in 'abcdefghijklmnopqrstuvwxyz':\n      return False\n  return True\n</pre>", "solution": "def is_capitalized_sentence(s):\n  word_list = s.split()\n  for word in word_list:\n    if word[0] not in 'ABCDEFGHIJKLMNOPQRSTUVWXYZ':\n      return False\n  return True", "test": "for x in {{ xs }}:\n  print is_capitalized_sentence(x)"}, {"gen_template_vars": "res = {\n  'x': rand_sidict(),\n  'y': rand_word(),\n  'z': rand_int(-100, 100)\n}", "prompt": "Create the following dictionary and print it out: {{ x }}.\nThen, map \"{{ y }}\" to {{ z }} in it and print it out again.", "problem_name": "make_dict", "hint": "Here's code to create the dictionary { 2: \"a\", 3: \"b\" }, print it, and then\nmap 47 to \"xyz\" in it and print it again:\n<pre>\nx = { 2: \"a\", 3: \"b\" }\nprint x\nx[47] = \"xyz\"\nprint x\n</pre>", "solution": "x = {{ x }}\nprint x\nx['{{ y }}'] = {{ z }}\nprint x", "test": "# pass"}, {"gen_template_vars": "res = {\n  'x': rand_int(3, 9),\n  'n': rand_int(1000, 10000)\n}", "prompt": "Print the sum of all multiples of {{ x }} less than or equal to {{ n }}.", "problem_name": "sum_multiples_less_than", "hint": "To help you get started, here's how to print the sum of all integers less than or equal to 100:\n<pre>\nsum = 0\nx = 1\nwhile x <= 100:\n  sum += x\n  x += 1\nprint sum\n</pre>", "solution": "sum = 0\nx = {{ x }}\nwhile x <= {{ n }}:\n  sum += x\n  x += {{ x }}\nprint sum", "test": "# pass"}, {"gen_template_vars": "n = rand_int(2, 10)\nres = {\n  'x' : rand_sentence_list(10),\n  'n' : n,\n  'nth' : nth(n)\n}", "prompt": "Write a function called get_{{ nth }}_char that takes a string as an argument and returns its {{ nth }} character. If the string is less than {{ n }} characters long, get_{{ nth }}_char should return None.", "problem_name": "get_nth_char", "hint": "Here's code for the get_first_char function which takes a string as\nan argument and returns its first character:\n<pre>\ndef get_first(s):\n  if len(s) < 1:\n    return None\n  return s[0]\n</pre>", "solution": "def get_{{ nth }}_char(s):\n  if len(s) < {{ n }}:\n    return None\n  return s[{{ n }}-1]", "test": "print get_{{ nth }}_char('')\nfor s in {{ x }}:\n  print get_{{ nth }}_char(s)"}, {"gen_template_vars": "n = rand_int(3, 50)\nres = {\n  'x' : rand_int_list(1000),\n  'n' : n,\n  'nth' : nth(n)\n}", "prompt": "Write a function called filter_every_{{ nth }} that takes a list of integers as\nan argument and returns a list of only every {{ nth }} number in the list,\nstarting with the first number.", "problem_name": "filter_every_nth", "hint": "Here's code for the filter_every_other function which takes a list of integers\nas an argument and returns a list of every other number, starting with the first\nnumber:\n<pre>\ndef filter_every_other(lst):\n  res = []\n  for i, num in enumerate(lst):\n    if i % 2 == 0:\n      res.append(num)\n  return res\n</pre>", "solution": "def filter_every_{{ nth }}(lst):\n  res = []\n  for i, num in enumerate(lst):\n    if i % {{ n }} == 0:\n      res.append(num)\n  return res", "test": "print filter_every_{{ nth }}([])\nprint filter_every_{{ nth }}([23])\nprint filter_every_{{ nth }}({{ x }})"}, {"gen_template_vars": "xs = rand_word_list(20)\nfor x in xs:\n  if random() < 0.5:\n    x = x[0].upper() + x[1:]\nres = {\n  'xs': xs\n}", "prompt": "Write a function called is_capitalized that takes a string as its argument and\nreturns True if and only if it starts with a capital letter.", "problem_name": "is_capitalized", "hint": "Here's code for is_lowercase(s): which takes a string as its argument and\nreturns True if and only if it starts with a lowercase letter:\n<pre>\ndef is_lowercase(s):\n  return len(s) > 0 and s[0] in 'abcdefghijklmnopqrstuvwxyz'\n</pre>", "solution": "def is_capitalized(s):\n  return len(s) > 0 and s[0] in 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'", "test": "print is_capitalized('')\nfor x in {{ xs }}:\n  print is_capitalized(x)"}, {"gen_template_vars": "xs = rand_string_list(20)\nfor i, s in enumerate(xs):\n  if random() < 0.5:\n    for j in range(rand_int(0, 5)):\n      idx = rand_int(0, len(xs)-1)\n      xs[i] = s[:idx] + ',' + s[idx+1:]\nres = {\n  'xs': xs\n}", "prompt": "Write a function called replace_commas that takes a string as its argument and\nreturns an identical string except with all commas replaced by spaces.", "problem_name": "replace_commas", "hint": "Here's the function replace_periods which takes a string as its argument and\nreturns an identical string except with all periods replaced by spaces.\n<pre>\ndef replace_periods(s):\n  return s.replace('.', ' ')\n</pre>", "solution": "def replace_commas(s):\n  return s.replace(',', ' ')", "test": "print replace_commas('')\nfor x in {{ xs }}:\n  print replace_commas(x)"}, {"gen_template_vars": "res = {\n  'x' : rand_word_list(20),\n  'y' : rand_word_list(20)\n}", "prompt": "Write a function called is_alphabetical(x, y) that takes two strings x and y as arguments and returns True if and only if x comes before y in the alphabet. Ignore capitalization.", "problem_name": "is_alphabetical", "hint": "Here's code for the is_reverse_alphabetical function which takes two strings x\nand y as arguments and returns True if and only if x comes after y in the\nalphabet, ignoring capitalization.\n<pre>\ndef is_reverse_alphabetical(x, y):\n  return x.lower() > y.lower()\n</pre>", "solution": "def is_alphabetical(x, y):\n  return x.lower() < y.lower()", "test": "for x in {{ x }}:\n  for y in {{ x }}:\n    print is_alphabetical(x, y)"}, {"gen_template_vars": "res = {\n  'to_print': rand_choice(['hello', 'i like chicken', 'apples taste good', 'mmm chocolate!'])\n}", "prompt": "Print the string \"{{ to_print }}\"", "problem_name": "q001", "hint": "The syntax to print the string \"lol\" is\n<pre>print \"lol\"\n</pre>", "solution": "print \"{{ to_print }}\"", "test": "# pass"}, {"gen_template_vars": "x = rand_int(0, 100)\ny = rand_int(x + 10, x + 100)\nlst = rand_int_list(20)\nfor i in range(len(lst)):\n  if random() < 0.5:\n    lst[i] = rand_int(x, y)\nres = {\n  'x': x,\n  'y': y,\n  'lst': lst\n}", "prompt": "Write a function called in_range_{{ x }}_{{ y }} that takes an integer as its argument and returns True if and only if that integer is between {{ x }} and {{ y }}, inclusive.", "problem_name": "in_range_x_y", "hint": "Here's code for not_in_range_23_47 that takes an integer as its argument and\nreturns True if and only if that integer is not between 23 and 47, inclusive:\n<pre>\ndef not_in_range_23_47(n):\n  return n < 23 or n > 47\n</pre>", "solution": "def in_range_{{ x }}_{{ y }}(n):\n  return n >= {{ x }} and n <= {{ y }}", "test": "print in_range_{{ x }}_{{ y }}({{ x }})\nprint in_range_{{ x }}_{{ y }}({{ y }})\nfor n in {{ lst }}:\n  print in_range_{{ x }}_{{ y }}(n)"}, {"gen_template_vars": "res = {\n  'w1': rand_word(),\n  'i1': rand_int(4, 10)\n}", "prompt": "Print the word '{{ w1 }}' {{ i1 }} times, each on a separate line. Your code should not be longer than 2 lines.", "problem_name": "q005", "hint": "Look at<a href=\"/cheatsheet.html\"> this cheatsheet </a> and read about for loops!\n<br>\nMake sure you aren't printing anything extra or else we won't be able to validate your answer.", "solution": "for i in range({{ i1 }}):\n    print '{{ w1 }}'", "test": "# pass"}, {"gen_template_vars": "res = {\n  'x': rand_word_list(20)\n}", "prompt": "Write a function called maxlen_string(x, y, z) that takes three strings x, y, z as arguments and returns the string with maximum length between them. If two strings have the same length, prioritize returning x over y and y over z.", "problem_name": "maxlen_string", "hint": "Here's code for minlen_string(x, y, z) which takes three strings x, y, z as arguments and returns the string with maximum length between them:\n<pre>\ndef minlen_string(x, y, z):\n  if len(x) <= len(y):\n    if len(z) < len(x):\n      return z\n    return x\n  elif len(z) < len(y):\n    return z\n  return y\n</pre>", "solution": "def maxlen_string(x, y, z):\n  if len(x) >= len(y):\n    if len(z) > len(x):\n      return z\n    return x\n  elif len(z) > len(y):\n    return z\n  return y", "test": "for i in {{ x }}:\n  for j in {{ x }}:\n    for k in {{ x }}:\n      print maxlen_string(i, j, k)"}, {"gen_template_vars": "x = choice(['haha', 'baabaa', 'xx', 'swingswing', 'lolo'])\nys = rand_string_list(20)\nfor i, y in enumerate(ys):\n  if random < 0.5:\n    for j in range(randint(0, 5)):\n      idx = randint(0, len(ys)-1)\n      ys[i] = y[:idx] + x * randint(1, 5) + y[idx+1:]\nres = {\n  'x': x,\n  'ys': ys\n}", "prompt": "Write a function called num_found_{{ x }}_overlaps that takes a string as its\nargument and returns the number of times '{{ x }}' occurs in that string,\nincluding overlaps.", "problem_name": "num_found_x_overlaps", "hint": "Here's the function is_bb_found_twice_overlaps which takes a string as its\nargument and returns True if and only if 'bb' occurs at least twice in that\nstring, including overlaps.\n<pre>\ndef is_bb_found_twice_overlaps(s):\n  bb_found_once = False\n  for i in range(len(s) - len('bb') + 1):\n    if s[i:i+len('bb')] == 'bb':\n      if bb_found_once:\n        return True\n      bb_found_once = True\n  return False\n</pre>", "solution": "def num_found_{{ x }}_overlaps(s):\n  count = 0\n  for i in range(len(s) - len('{{ x }}') + 1):\n    if s[i:i+len('{{ x }}')] == '{{ x }}':\n      count += 1\n  return count", "test": "print num_found_{{ x }}_overlaps('')\nfor y in {{ ys }}:\n  print num_found_{{ x }}_overlaps(y)"}, {"gen_template_vars": "res = {\n  'x': rand_sentence_list(20)\n}", "prompt": "Write a function called reverse_sentence that takes a sentence string as its argument and returns a new string with all the same words (separated by spaces) in reverse order that they appeared in the original string. You may assume all words are separated by a single space, and the setnence does not begin or end with any spaces.", "problem_name": "reverse_sentence", "hint": "Here's code for the every_other_word function that takes a string as its\nargument returns a new string made out of every other word of the string,\nusing 'extended slices' in Python:\n<pre>\ndef every_other_word(s):\n  word_list = s.split()\n  every_other_word_list = word_list[::2]\n  return ' '.join(every_other_word_list)\n</pre>", "solution": "def reverse_sentence(s):\n  word_list = s.split()\n  reverse_word_list = word_list[::-1]\n  return ' '.join(reverse_word_list)", "test": "print reverse_sentence('')\nfor s in {{ x }}:\n  print reverse_sentence(s)"}, {"gen_template_vars": "res = {\n  'x': rand_word_list(20)\n}", "prompt": "Write a function called reverse_string that takes a string as its argument and returns the same string in reverse.", "problem_name": "reverse_string", "hint": "Here's code for the every_other_char function that takes a string as its\nargument returns the string made out of every other character of the string,\nusing 'extended slices' in Python:\n<pre>\ndef every_other_char(s):\n  return s[::2]\n</pre>", "solution": "def reverse_string(s):\n  return s[::-1]", "test": "print reverse_string('')\nfor s in {{ x }}:\n  print reverse_string(s)"}, {"gen_template_vars": "res = {\n  'x': rand_int_list(20)\n}", "prompt": "Write a function called max_three that takes three integers as arguments and returns the maximum between them.", "problem_name": "max_three", "hint": "Here's code for min_three that takes three integers as arguments and returns the\nminimum between them:\n<pre>\ndef min_three(x, y, z):\n  if x < y:\n    if z < x:\n      return z\n    return x\n  elif z < y:\n    return z\n  return y\n</pre>", "solution": "def max_three(x, y, z):\n  if x > y:\n    if z > x:\n      return z\n    return x\n  elif z > y:\n    return z\n  return y", "test": "for i in {{ x }}:\n  for j in {{ x }}:\n    for k in {{ x }}:\n      print max_three(i, j, k)"}, {"gen_template_vars": "res = {\n  'xs': rand_word_list(20)\n}", "prompt": "Write a function called make_all_caps that takes a string as its argument and\nreturns a new version of it with all capital letters. Any non-letter character\nshould remain unchanged.", "problem_name": "make_all_caps", "hint": "Here's code for make_all_lowercase that takes a string as its argument and\nreturns a new version of it with all lowercase letters:\n<pre>\ndef make_all_lowercase(s):\n  return s.lower()\n</pre>", "solution": "def make_all_caps(s):\n  return s.upper()", "test": "print make_all_caps('')\nfor x in {{ xs }}:\n  print make_all_caps(x)"}, {"gen_template_vars": "res = {\n  'x' : rand_int_list(100)\n}", "prompt": "Write a function called sum_list that takes a list of integers as an argument\nand returns their sum.", "problem_name": "sum_list", "hint": "Here's code for the product_list function which takes a list of integers as an\nargument and returns their product:\n<pre>\ndef product_list(lst):\n  product = 1\n  for num in lst:\n    product *= num\n  return product\n</pre>", "solution": "def sum_list(lst):\n  sum = 0\n  for num in lst:\n    sum += num\n  return sum", "test": "print sum_list([])\nprint sum_list([23])\nprint sum_list({{ x }})"}, {"gen_template_vars": "res = {\n  'x': rand_word_list(10),\n  'y': rand_word(),\n  'z': rand_word()\n}", "prompt": "Create the following list and print it out: {{ x }}.\nThen, append \"{{ y }}\" and \"{{ z }}\" to it and print it out again.", "problem_name": "make_list", "hint": "Here's code to create the list [1, 2, 3], print it, and then\nappend 4 to it and print it again:\n<pre>\nx = [1, 2, 3]\nprint x\nx.append(4)\nprint x\n</pre>", "solution": "x = {{ x }}\nprint x\nx.append(\"{{ y }}\")\nx.append(\"{{ z }}\")", "test": "# pass"}, {"gen_template_vars": "res = {\n  'x' : rand_sentence_list(10)\n}", "prompt": "Write a function called num_words that takes a sentence string as an argument and returns the number of individual words, separated by spaces, in the string.", "problem_name": "num_words", "hint": "Here's code for the list_of_words function which takes a string as\nan argument and returns a list of its individual words:\n<pre>\ndef list_of_words(s):\n  return s.split()\n</pre>", "solution": "def num_words(s):\n  return len(s.split())", "test": "print num_words('')\nfor s in {{ x }}:\n  print num_words(s)"}, {"gen_template_vars": "x = rand_string_list(20)\nfor i, s in enumerate(x):\n  if random() < 0.5:\n    ch = ''\n    if random() < 0.5:\n      ch = rand_char()\n    x[i] = s + ch + s[::-1]\nres = {\n  'x' : x\n}", "prompt": "Write a function called is_palindrome that takes a string as an argument and returns True if and only if that string is a palindrome (is exactly the same forwards and backwards, including capitalization).", "problem_name": "is_palindrome", "hint": "Here's code for the is_backwards function that takes two strings x and y as\narguments and returns True if and only if x is exactly the same as y backwards.\n<pre>\ndef is_backwards(x, y):\n  if len(x) != len(y):\n    return False\n  for i in range(len(x)):\n    if x[i] != y[-i-1]:\n      return False\n  return True\n</pre>", "solution": "def is_palindrome(s):\n  for i in range(len(s)/2):\n    if s[i] != s[-i-1]:\n      return False\n  return True", "test": "print is_palindrome('')\nfor s in {{ x }}:\n  print is_palindrome(s)"}, {"gen_template_vars": "res = {\n  'comp_op': choice(['<=', '<', '>=', '>']),\n  'x': rand_int_list(20)\n}", "prompt": "Write a function called compare_nums(x, y) that takes two integers x, y as arguments and returns True if and only if x {{ comp_op }} y.", "problem_name": "compare_nums", "hint": "Here's code for not_equals(x, y) that takes two integers x, y as arguments and\nreturns True if and only if x is not equal to y:\n<pre>\ndef not_equals(x, y):\n  return x != y\n</pre>", "solution": "def compare_nums(x, y):\n  return x {{ comp_op }} y", "test": "for i in {{ x }}:\n  for j in {{ x }}:\n    print compare_nums(i, j)"}, {"gen_template_vars": "n = rand_int(2, 10)\nxs = rand_word_list(20)\nys = rand_word_list(20)\nfor i, word in enumerate(ys):\n  if random() < 0.5:\n    xs[i] = word[-n:] + xs[i][n:]\nres = {\n  'n': n,\n  'xs': xs,\n  'ys': ys\n}", "prompt": "Write a function called prefix_suffix_{{ n }}(x, y) that takes two strings x, y as arguments and returns True if and only if the first {{ n }} characters of x are exactly the same as the last {{ n }} characters of y.", "problem_name": "prefix_suffix_n", "hint": "Here's code for suffix_suffix_3(x, y) which takes two strings x, y as arguments and returns True if and only if the last 3 character of x and y are exactly the same:\n<pre>\ndef suffix_suffix_3(x, y):\n  return x[-3:] == y[-3:]\n</pre>", "solution": "def prefix_suffix_{{ n }}(x, y):\n  return x[:{{ n }}] == y[-{{ n }}:]", "test": "for x in {{ xs }}:\n  for y in {{ ys }}:\n    print prefix_suffix_{{ n }}(x, y)"}, {"gen_template_vars": "res = {\n  'x': rand_letter(),\n  'ys': rand_sentence_list(20)\n}", "prompt": "Write a function called space_with_{{ x }} that takes a string as its argument\nand replaces any spaces in it with the character '{{ x }}'.", "problem_name": "space_with_x", "hint": "Write a function called replace_periods that takes a string as its argument and\nreturns an identical string except with all periods replaced by spaces.\n<pre>\ndef replace_commas(s):\n  return s.replace('.', ' ')\n</pre>", "solution": "def space_with_{{ x }}(s):\n  return s.replace(' ', '{{ x }}')", "test": "print space_with_{{ x }}('')\nfor y in {{ ys }}:\n  print space_with_{{ x }}(y)"}, {"gen_template_vars": "res = {\n  'x' : rand_sidict()\n}", "prompt": "Write a function called max_dict that takes a nonempty dictionary mapping\nstrings to integers and returns the string that's mapped to the maximum value in\nthe dictionary. If multiple words are mapped to the same maximum value, return a\nlist of all of them.", "problem_name": "max_dict", "hint": "Here's code for the min_dict function which takes a dict mapping strings to\nintegers as an argument and returns the string that's mapped to the minimum\nvalue in the dictionary:\n<pre>\ndef min_dict(d):\n  min_num = float('inf')\n  min_words = []\n  for word, num in d.items():\n    if num < min_num:\n      min_num = num\n      min_words = [word]\n    elif num == min_num:\n      min_words.append(word)\n  if len(min_words) == 1:\n    return min_words[0]\n  return min_words\n</pre>", "solution": "def max_dict(d):\n  max_num = -float('inf')\n  max_words = []\n  for word, num in d.items():\n    if num > max_num:\n      max_num = num\n      max_words = [word]\n    elif num == max_num:\n      max_words.append(word)\n  if len(max_words) == 1:\n    return max_words[0]\n  return max_words", "test": "print max_dict({'bob': 5})\nprint max_dict({'a': -4, 'b': 0, 'c': 0})\nprint max_dict({{ x }})"}, {"gen_template_vars": "x = rand_letter()\nys = rand_string_list(20)\nfor i, s in enumerate(ys):\n  if random() < 0.5:\n    for j in range(rand_int(0, 5)):\n      idx = rand_int(0, len(ys)-1)\n      ys[i] = s[:idx] + x + s[idx+1:]\nres = {\n  'x': x,\n  'ys': ys\n}", "prompt": "Write a function called capitalize_{{ x }} that takes a string as its argument\nand returns a new version of it with every letter {{ x }} capitalized.", "problem_name": "capitalize_x", "hint": "Here's code for lowercase_B that takes a string as its argument\nand returns a new version of it with every letter B lowercased.\n<pre>\ndef lowercase_B(s):\n  res = ''\n  for char in s:\n    if char == 'B':\n      res += char.lower()\n    else:\n      res += char\n  return res\n</pre>", "solution": "def capitalize_{{ x }}(s):\n  res = ''\n  for char in s:\n    if char == '{{ x }}':\n      res += char.upper()\n    else:\n      res += char\n  return res", "test": "print capitalize_{{ x }}('')\nfor y in {{ ys }}:\n  print capitalize_{{ x }}(y)"}, {"gen_template_vars": "res = {\n  'x' : rand_int_list(1000),\n  'n' : rand_int(3, 50)\n}", "prompt": "Write a function called filter_multiples_of_{{ n }} that takes a list of\nintegers as an argument and returns a new list with only its numbers that are\nmultiples of {{ n }}.", "problem_name": "filter_multiples_of", "hint": "Here's code for the filter_evens function which takes a list of integers as\nan argument and returns a list of only its even numbers:\n<pre>\ndef filter_evens(lst):\n  res = []\n  for num in lst:\n    if num % 2 == 0:\n      res.append(num)\n  return res\n</pre>", "solution": "def filter_multiples_of_{{ n }}(lst):\n  res = []\n  for num in lst:\n    if num % {{ n }} == 0:\n      res.append(num)\n  return res", "test": "print filter_multiples_of_{{ n }}([])\nprint filter_multiples_of_{{ n }}([23])\nprint filter_multiples_of_{{ n }}({{ x }})"}, {"gen_template_vars": "res = {\n  'x': rand_sentence_list(20)\n}", "prompt": "Write a function called reverse_sentence_words that takes a sentence string as its argument and returns a new string with every individual word (separated by spaces) reversed, but in the same order as they appeared in the original sentence.", "problem_name": "reverse_sentence_words", "hint": "Here's code for the condense_sentence_words function that takes a string as its\nargument returns a new string by taking only every other character of every\nword, using 'extended slices' in Python:\n<pre>\ndef condense_sentence_words(s):\n  word_list = s.split()\n  for i, word in enumerate(word_list):\n    word_list[i] = word[::2]\n  return ' '.join(word_list)\n</pre>", "solution": "def reverse_sentence_words(s):\n  word_list = s.split()\n  for i, word in enumerate(word_list):\n    word_list[i] = word[::-1]\n  return ' '.join(word_list)", "test": "print reverse_sentence_words('')\nfor s in {{ x }}:\n  print reverse_sentence_words(s)"}, {"gen_template_vars": "res = {\n  'x' : rand_word_list_list(10)\n}", "prompt": "Write a function called make_sentence that takes a list of strings (words) as an argument and returns the string created by concatenating all the words with spaces in between.", "problem_name": "make_sentence", "hint": "Here's code for the make_csv function which takes list of strings as an argument\nand returns the string created by concatenating all the strings with commas in\nbetween:\n<pre>\ndef make_csv(lst):\n  return ','.join(lst)\n</pre>", "solution": "def make_sentence(lst):\n  return ' '.join(lst)", "test": "for lst in {{ x }}:\n  print make_sentence(lst)"}, {"gen_template_vars": "n = rand_int(3, 50)\nres = {\n  'x' : rand_int_list(100),\n  'y' : rand_int_list(n-1),\n  'z' : rand_int_list(n),\n  'n' : n,\n  'nth' : nth(n)\n}", "prompt": "Write a function called get_{{ nth }} that takes a list as an\nargument and returns its {{ nth }} element. If the list is less than {{ n }}\nitems long, get_{{ nth }} should return None.", "problem_name": "get_nth", "hint": "Here's code for the get_first function which takes a list as\nan argument and returns the first element:\n<pre>\ndef get_first(lst):\n  return lst[0]\n</pre>", "solution": "def get_{{ nth }}(lst):\n  if {{ n }} > len(lst):\n    return None\n  return lst[{{ n }}-1]", "test": "print get_{{ nth }}([])\nprint get_{{ nth }}([23])\nprint get_{{ nth }}({{ x }})"}, {"gen_template_vars": "res = {\n  's1': rand_sentence()\n}", "prompt": "Write a function called first_word that takes in a sentence as the argument and returns the first word of the sentence. Then write the following line to test if your function works \"print first_word('{{ s1 }}')\".", "problem_name": "q006", "hint": "Look at<a href=\"/cheatsheet.html\"> this cheatsheet </a> and read about string manipulation (in particular the split method)!\n<br>\nTo help you get started, below is a function called double that takes in one argument a and returns a * 2.\n<pre>\ndef double(a):\n   return a * 2\n</pre>\n<br>\nMake sure you aren't printing anything extra or else we won't be able to validate your answer.", "solution": "def first_word(sentence):\n    return sentence.split(' ')[0]\nprint first_word('{{ s1 }}')", "test": "print first_word('my pink pony')"}]