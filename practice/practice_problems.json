[{"gen_template_vars": "res = {\n  'x': rand_int(2, 20)\n}", "prompt": "Define a function multiply_by_{{ x }}(num) that takes in one number as input and returns the number multiplied by {{ x }}", "problem_name": "q002", "hint": "The syntax for the function add_5 is\n<pre>def add(num):\n  return num + 5\n</pre>", "solution": "def multiply_by_{{ x }}(num):\n    return num * {{ x }}", "test": "print multiply_by_{{ x }}(5)\nprint multiply_by_{{ x }}(10)\nprint multiply_by_{{ x }}(12)\nprint multiply_by_{{ x }}(3)"}, {"gen_template_vars": "res = {\n  'x': rand_string_list()\n}", "prompt": "Given a list of words, write a function called get_word_counts(list_of_words) that returns a dictionary of the word counts of the list of words. Ex: get_word_counts([\"hello\", \"my\", \"name\", \"is\", \"joe\", \"hello\", \"joe\"]) will return {\"hello\": 2, \"my\": 1, \"name\": 1, \"is\": 1, \"joe\": 2}. Then execute the line 'print get_word_counts({{ x }})'.", "problem_name": "q003", "hint": "The syntax for the function create_entry_for_each_word is below. This function creates an entry in the dictoinary for each word and has word: True for each word in the list.\n<pre>def create_entry_for_each_word(list_of_words):\n  words = {}\n  for word in list_of_words:\n    if word not in words:\n      words[word] = True\n  return words\n</pre>", "solution": "def get_word_counts(list_of_words):\n    word_counts = {}\n    for word in list_of_words:\n        if word not in word_counts:\n            word_counts[word] = 0\n        word_counts[word] += 1\n    return word_counts\n\nprint get_word_counts({{ x }})", "test": "print get_word_counts(['hello', 'my', 'name', 'is', 'joe'])\nprint get_word_counts(['joe', 'joe', 'joe', 'joe'])\nprint get_word_counts(['hello', 'hello', 'my', 'my', 'name', 'name', 'is', 'is', 'joe', 'joe'])"}, {"gen_template_vars": "res = {\n  'w1': rand_word(),\n  'w2': rand_word(),\n  'i1': rand_int(4, 1000),\n  'i2': rand_int(4, 1000)\n}", "prompt": "Create an empty dictionary called <b> word_counts </b>  and add the key '{{ w1 }}' to value {{ i1 }} and the key '{{ w2 }}' to value {{ i2 }}. Then write <b>print word_counts['{{ w2 }}']</b> which will look up the value of '{{ w2 }}'in the dictionary word_counts.", "problem_name": "q004", "hint": "Look at<a href=\"/cheatsheet.html\"> this cheatsheet </a> to find information about how to create dictionaries and set a key to a value in a dictionary.\n<br>\nDid you remember to set '{{ w1 }}' to {{ i1 }}? We're checking it...", "solution": "word_counts = {}\nword_counts['{{ w1 }}'] = {{ i1 }}\nword_counts['{{ w2 }}'] = {{ i2 }}\nprint word_counts['{{ w2 }}']", "test": "print word_counts['{{ w1 }}']"}, {"gen_template_vars": "res = {\n  'op0': choice(['+', '-', '*', '/', '%', '**']),\n  'op1': choice(['+', '-', '*', '/', '%', '**'])\n}", "prompt": "Write a function called do_arithmetic that takes arguments x, y, and z and returns (x {{ op0 }} y) {{ op1 }} z.", "problem_name": "q007", "hint": "To help you get started, below is a function called multiply that takes in two arguments a and b and returns a * b.\n<pre>\ndef multiply(a, b):\n   return a * b\n</pre>\n<br>\nMake sure you aren't printing anything extra or else we won't be able to validate your answer.", "solution": "def do_arithmetic(x, y, z):\n    return (x {{ op0 }} y) {{ op1 }} z", "test": "print do_arithmetic(3, 4, 5)\nprint do_arithmetic(-2, 100, -7)\nprint do_arithmetic(1, -4, 9999)"}, {"gen_template_vars": "res = {\n  'to_print': rand_choice(['hello', 'i like chicken', 'apples taste good', 'mmm chocolate!'])\n}", "prompt": "Print the string \"{{ to_print }}\"", "problem_name": "q001", "hint": "The syntax to print the string \"lol\" is\n<pre>print \"lol\"\n</pre>", "solution": "print \"{{ to_print }}\"", "test": "# pass"}, {"gen_template_vars": "res = {\n  'w1': rand_word(),\n  'i1': rand_int(4, 10)\n}", "prompt": "Print the word '{{ w1 }}' {{ i1 }} times, each on a separate line. Your code should not be longer than 2 lines.", "problem_name": "q005", "hint": "Look at<a href=\"/cheatsheet.html\"> this cheatsheet </a> and read about for loops!\n<br>\nMake sure you aren't printing anything extra or else we won't be able to validate your answer.", "solution": "for i in range({{ i1 }}):\n    print '{{ w1 }}'", "test": "# pass"}, {"gen_template_vars": "res = {\n  's1': rand_sentence()\n}", "prompt": "Write a function called first_word that takes in a sentence as the argument and returns the first word of the sentence. Then write the following line to test if your function works \"print first_word('{{ s1 }}')\".", "problem_name": "q006", "hint": "Look at<a href=\"/cheatsheet.html\"> this cheatsheet </a> and read about string manipulation (in particular the split method)!\n<br>\nTo help you get started, below is a function called double that takes in one argument a and returns a * 2.\n<pre>\ndef double(a):\n   return a * 2\n</pre>\n<br>\nMake sure you aren't printing anything extra or else we won't be able to validate your answer.", "solution": "def first_word(sentence):\n    return sentence.split(' ')[0]\nprint first_word('{{ s1 }}')", "test": "print first_word('my pink pony')"}]