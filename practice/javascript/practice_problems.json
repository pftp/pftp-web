[{"gen_template_vars": "xs = rand_word_list(20)\nfor x in xs:\n  if random() < 0.5:\n    x = x[0].upper() + x[1:]\nres = {\n  'xs': xs\n}", "prompt": "Write a function called is_capitalized that takes a string as its argument and\nreturns true if and only if it starts with a capital letter.", "problem_name": "is_capitalized", "hint": "Here's code for is_lowercase(s): which takes a string as its argument and\nreturns true if and only if it starts with a lowercase letter:\n<pre>\nfunction is_lowercase(s) {\n  return s.length > 0 and s[0] === s[0].toLowerCase();\n}\n</pre>", "solution": "function is_capitalized(s) {\n  return s.length > 0 && s[0] === s[0].toUpperCase();\n}", "test": "console.log(is_capitalized(''));\nfor (var x in {{ xs }})\n  console.log(is_capitalized(x));"}, {"gen_template_vars": "res = {\n  'var_name': rand_word(),\n  'x': rand_int(10, 100),\n  'var_name1': rand_word(),\n  'y': rand_int(10, 1000)\n}", "prompt": "Create a variable called {{ var_name }} and set the value of {{ var_name }} to be {{ x }}. Create another variable called {{ var_name1 }} and set the value of {{ var_name1 }} to be {{ y }}. Print the sum of {{ var_name }} and {{ var_name1 }} by executing the line \"console.log({{ var_name }} + {{ var_name1 }});\"", "problem_name": "add_variables", "hint": "The syntax to create a variable called num_chickens and set the value of num_chickens to be 5 is\n<pre>var num_chickens = 5;\n</pre>", "solution": "var {{ var_name }} = {{ x }};\nvar {{ var_name1 }} = {{ y }};\nconsole.log({{ var_name }} + {{ var_name1 }});", "test": "console.log({{ var_name }});\nconsole.log({{ var_name1 }});"}, {"gen_template_vars": "x = rand_letter()\nbs = rand_string_list(20)\ncs = rand_string_list(20)\nfor i, b in enumerate(cs):\n  if random() < 0.5:\n    count = 0\n    for ch in b:\n      if ch == x:\n        count += 1\n    for j, ch in enumerate(bs[i]):\n      if ch == x:\n        if count > 0:\n          count -= 1\n        else:\n          bs[i] = bs[i][:j] + '0' + bs[i][j+1:]\n    for j in range(count):\n      bs[i] += x\nres = {\n  'x': x,\n  'bs': bs,\n  'cs': cs\n}", "prompt": "Write a function called same_num_{{ x }} that takes two strings as arguments and\nreturns true if and only if they have exactly the same number of the character\n\"{{ x }}\".", "problem_name": "same_num_x", "hint": "Here's a function called different_num_H that takes two strings as arguments and\nreturns True if and only if they have different numbers of the character 'H':\n<pre>\nfunction different_num_H(a, b) {\n  var count = 0;\n  for (var i = 0; i < a.length; i++) {\n    if (a[i] == 'H')\n      count += 1;\n  }\n  for (var i = 0; i < b.length; i++) {\n    if (b[i] == 'H')\n      count -= 1;\n  }\n  return count != 0;\n}\n</pre>", "solution": "function same_num_{{ x }}(a, b) {\n  var count = 0;\n  for (var i = 0; i < a.length; i++) {\n    if (a[i] == '{{ x }}')\n      count += 1;\n  }\n  for (var i = 0; i < b.length; i++) {\n    if (b[i] == '{{ x }}')\n      count -= 1;\n  }\n  return count == 0;\n}", "test": "console.log(same_num_{{ x }}('', ''));\nfor (var a in {{ bs }})\n  for (var b in {{ cs }})\n    console.log(same_num_{{ x }}(a, b));"}, {"gen_template_vars": "xs = []\nfor i in range(20):\n  a = str(rand_int(200, 999))\n  b = str(rand_int(100, 999))\n  c = str(rand_int(1000, 9999))\n  num_str = '(' + a + ') ' + b + '-' + c\n  xs.append(num_str)\nres = {\n  'xs': xs\n}", "prompt": "Write a function called sum_phone_parts that takes a string of a 10-digit phone\nnumber in the form \"(xxx) yyy-zzzz\" as its argument and returns the sum of its\nconstituent parts, i.e. xxx+yyy+zzzz. For example,\nsum_phone_parts(\"(234) 567-8901\") should return 9702.", "problem_name": "sum_phone_parts", "hint": "Here's a function called sum_phone_parts that takes a string of a 7-digit phone\nnumber in the form \"xxx-yyyy\" as its argument and returns the sum of its\nconstituent parts, i.e. xxx+yyyy:\n<pre>\nfunction sum_phone_parts(num_str) {\n  return parseInt(num_str.substring(0,3)) + parseInt(num_str.substring(4));\n}\n</pre>", "solution": "function sum_phone_parts(num_str) {\n  return parseInt(num_str.substring(1,4)) + parseInt(num_str.substring(6,9)) + parseInt(num_str.substring(10));\n}", "test": "for (var x in {{ xs }})\n  console.log(sum_phone_parts(x));"}, {"gen_template_vars": "xs = rand_sentence_list(20)\nfor i, x in enumerate(xs):\n  if random() < 0.5:\n    xs[i] = x.upper()\nres = {\n  'xs': xs\n}", "prompt": "Write a function called pig_latin that takes a sentence string as its argument\nand returns it with each of its words converted to pig latin. This means take\nall consonants from the beginning of each word (if there are any) and move them\nto the end of the word, and then append \"ay\" to the word. For example,\npig_latin(\"A great surprise\") should return \"Aay eatgray urprisesay\".", "problem_name": "pig_latin", "hint": "Remember to check for upper as well as lower case letters when going through\neach word looking for the first block of consonants.", "solution": "function pig_latin(s) {\n  var word_array = s.split(\" \");\n  for (var i = 0; i < word_array.length; i++) {\n    var word = word_array[i];\n    var first_consonants = '';\n    var rest_word = word;\n    for (var j = 0; j < word.length; j++) {\n      var ch = word[j];\n      if ('aeiouAEIOU'.indexOf(ch) != -1)\n        break;\n      first_consonants += ch;\n      rest_word = rest_word.substring(1);\n    }\n    word_array[i] = rest_word + first_consonants + 'ay';\n  }\n  return word_array.join(' ');\n}", "test": "for (var x in {{ xs }})\n  console.log(pig_latin(x));"}, {"gen_template_vars": "res = {\n  'x': [ 3, 4, 5, 6, 7][rand_int(0, 4)],\n  'random_list': [rand_int(1, 35) for i in range(rand_int(8, 12))]\n}", "prompt": "Create a function called count_multiples_of_{{ x }}(array) that takes in a array of integers and returns the number of elements in the array that are a multiple of {{ x }}. Then verify that your function works by executing \"console.log(count_multiples_of_{{ x }}({{ random_list }}));\"", "problem_name": "count_multiples_of_x", "hint": "Here's code for the print_multiples_2(array) function that takes each element in the array and prints it if it is a multiple of 2\n<pre>\nfunction print_array(array) {\n  for (var i = 0; i < array.length; i++) {\n    if (array[i] % 2 == 0)\n      console.log(array[i]);\n  }\n</pre>", "solution": "function count_multiples_of_{{ x }}(array) {\n  var count = 0;\n  for (var i = 0; i < array.length; i++) {\n    if (array[i] % {{ x }} == 0)\n      count += 1;\n  }\n  return count;\n}\nconsole.log(count_multiples_of_{{ x }}({{ random_list }}));", "test": "console.log(count_multiples_of_{{ x }}([1,2,3,4,5,6,7,8,9,10]));\nconsole.log(count_multiples_of_{{ x }}([11,12,13,14,15,16,17,18,19,20]));\nconsole.log(count_multiples_of_{{ x }}([21,22,23,24,25,26,27,28,29,30]));"}, {"gen_template_vars": "res = {\n  'op0': choice(['+', '-', '*', '/', '%']),\n  'op1': choice(['+', '-', '*', '/', '%'])\n}", "prompt": "Write a function called do_arithmetic that takes arguments x, y, and z and returns (x {{ op0 }} y) {{ op1 }} z.", "problem_name": "q007", "hint": "To help you get started, below is a function called multiply that takes in two arguments a and b and returns a * b.\n<pre>\nfunction multiply(a, b) {\n  return a * b;\n}\n</pre>\n<br>\nMake sure you aren't printing anything extra or else we won't be able to validate your answer.", "solution": "function do_arithmetic(x, y, z) {\n  return (x {{ op0 }} y) {{ op1 }} z;\n}", "test": "console.log(do_arithmetic(3, 4, 5));\nconsole.log(do_arithmetic(-2, 100, -7));\nconsole.log(do_arithmetic(1, -4, 9999));"}, {"gen_template_vars": "n = rand_int(2, 5)\nres = {\n  'xs': rand_string_list(20),\n  'n': n,\n  'nth': nth(n)\n}", "prompt": "Write a function called capitalize_every_{{ nth }}_letter that takes a string as\nits argument and returns a new version of it with every {{ nth }} letter in it\ncapitalized, starting with the first letter. Any non-letter characters should\nremain unchanged and should not be counted when determining every {{ nth }}\nletter.", "problem_name": "capitalize_every_nth_letter", "hint": "Here's code for lowercase_every_3rd_letter which takes a string as its\nargument and returns a new version of it with every 3rd letter\nlowercase, starting with the first letter, and ignoring non-letter characters\nwhen counting:\n<pre>\nfunction lowercase_every_3rd_letter(s) {\n  var res = '';\n  var count = 0;\n  var alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  for (var i = 0; i < s.length; i++) {\n    var char = s[i];\n    if (alphabet.indexOf(char.toLowerCase()) != -1) {\n      if (count % 3 == 0)\n        res += char.toLowerCase();\n      else\n        res += char;\n      count += 1;\n    } else\n      res += char;\n  }\n  return res;\n}\n</pre>", "solution": "function capitalize_every_{{ nth }}_letter(s) {\n  var res = '';\n  var count = 0;\n  var alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  for (var i = 0; i < s.length; i++) {\n    var char = s[i];\n    if (alphabet.indexOf(char.toLowerCase()) != -1) {\n      if (count % {{ n }} == 0)\n        res += char.toUpperCase();\n      else\n        res += char;\n      count += 1;\n    } else\n      res += char;\n  }\n  return res;\n}", "test": "console.log(capitalize_every_{{ nth }}_letter(''));\nfor (var x in {{ xs }})\n  console.log(capitalize_every_{{ nth }}_letter(x));"}, {"gen_template_vars": "res = {\n  'x': rand_sentence_list(20)\n}", "prompt": "Write a function called reverse_sentence_words that takes a sentence string as its argument and returns a new string with every individual word (separated by spaces) reversed, but in the same order as they appeared in the original sentence.", "problem_name": "reverse_sentence_words", "hint": "Here's code for the condense_sentence_words function that takes a string as its\nargument returns a new string by taking only every other character of every word:\n<pre>\nfunction condense_sentence_words(s) {\n  var word_array = s.split();\n  for (var i = 0; i < word_array.length; i++) {\n    var word = word_array[i];\n    var condensed_word = '';\n    for (var j = 0; j < word.length; j+=2) {\n      condensed_word += word[j];\n    }\n    word_array[i] = condensed_word;\n  }\n  return word_array.join(' ');\n}\n</pre>", "solution": "function reverse_sentence_words(s) {\n  var word_array = s.split();\n  for (var i = 0; i < word_array.length; i++) {\n    var word = word_array[i];\n    var reverse_word = '';\n    for (var j = word.length - 1; j >= 0; j--) {\n      reverse_word += word[j];\n    }\n    word_array[i] = reverse_word;\n  }\n  return word_array.join(' ');\n}", "test": "console.log(reverse_sentence_words(''));\nfor (var s in {{ x }})\n  console.log(reverse_sentence_words(s));"}, {"gen_template_vars": "res = {\n  'x': rand_word_list(20)\n}", "prompt": "Write a function called reverse_string that takes a string as its argument and returns the same string in reverse.", "problem_name": "reverse_string", "hint": "Here's code for the every_other_char function that takes a string as its\nargument and returns the string made out of every other character of the string\n<pre>\nfunction every_other_char(s) {\n  var res = '';\n  for (var i = 0; i < s.length; i+=2) {\n    res += s[i];\n  }\n  return res;\n}\n</pre>", "solution": "function reverse_string(s) {\n  var res = '';\n  for (var i = s.length - 1; i >= 0; i--) {\n    res += s[i];\n  }\n  return res;\n}", "test": "console.log(reverse_string(''));\nfor (var s in {{ x }})\n  console.log(reverse_string(s));"}, {"gen_template_vars": "res = {\n  'x': rand_word()\n}", "prompt": "Create a function called return_word() that takes nothing as arguments and simply returns the word '{{ x }}'.", "problem_name": "return_word", "hint": "The syntax to create a function called return_10() that takes in no arguments and simply returns 10 is\n<pre>function return_10() {\n  return 10;\n}\n</pre>", "solution": "function return_word() {\n  return '{{ x }}';\n}", "test": "console.log(return_word());"}, {"gen_template_vars": "res = {\n  'str': rand_sentence()\n}", "prompt": "Print out every character in \"{{ str }}\" using a while loop.", "problem_name": "print_while_string", "hint": "Here's how you can use a while loop to iterate over a string:\n<pre>\nvar sentence = \"foobar\";\nvar i = 0;\nwhile (i < sentence.length) {\n  console.log(sentence[i]);\n  i = i + 1;\n}\n</pre>", "solution": "var sentence = \"{{ str }}\";\nvar i = 0;\nwhile (i < sentence.length) {\n  console.log(sentence[i]);\n  i += 1;\n}", "test": "// pass"}, {"gen_template_vars": "res = {}", "prompt": "Write a function called is_factor that takes two integers x, y as arguments and\nreturns true if and only if x is a factor of y (that is, x divides y evenly with\nno remainder).", "problem_name": "is_factor", "hint": "Here's code for an is_even function which takes an integer x and returns true if\nand only if 2 is a factor of x:\n<pre>\nfunction is_even(x) {\n  return x % 2 == 0;\n}\n</pre>", "solution": "function is_factor(x, y) {\n  return y % x == 0;\n}", "test": "for (var i = 1; i < 100; i++)\n  for (var j = 1; j < 100; j++)\n    console.log(is_factor(i, j));"}, {"gen_template_vars": "res = {\n  'x': rand_int(10, 100)\n}", "prompt": "Create a function called add_{{ x }}(num) that takes in a number as an argument and returns that number plus {{ x }}. Then execute the line \"console.log(add_{{ x }}(5));\" to verify that your function works.", "problem_name": "add_x", "hint": "Here's code for the add_two function which takes two integers as\narguments and returns their sum:\n<pre>\nfunction add_two(x, y) {\n  return x + y;\n}\n</pre>", "solution": "function add_{{ x }}(num) {\n  return {{ x }} + num;\n}\nconsole.log(add_{{ x }}(5));", "test": "console.log(add_{{ x }}(6));\nconsole.log(add_{{ x }}(7));"}, {"gen_template_vars": "res = {\n  'comp_op': choice(['<=', '<', '>=', '>']),\n  'x': rand_int_list(20)\n}", "prompt": "Write a function called compare_nums(x, y) that takes two integers x, y as arguments and returns true if and only if x {{ comp_op }} y.", "problem_name": "compare_nums", "hint": "Here's code for not_equals(x, y) that takes two integers x, y as arguments and\nreturns True if and only if x is not equal to y:\n<pre>\nfunction not_equals(x, y) {\n  return x != y;\n}\n</pre>", "solution": "function compare_nums(x, y) {\n  return x {{ comp_op }} y;\n}", "test": "for (var i in {{ x }}) {\n  for (var j in {{ x }}) {\n    console.log(compare_nums(i, j));\n  }\n}"}, {"gen_template_vars": "res = {\n  'w1': rand_word(),\n  'i1': rand_int(4, 10)\n}", "prompt": "Print the word '{{ w1 }}' {{ i1 }} times, each on a separate line. Your code should not be longer than 2 lines.", "problem_name": "q005", "hint": "You can print something multiple times using a for loop like so:\n<pre>for (var i = 0; i < 10; i++) {\n  console.log('this is printed 10 times');\n}</pre>\nMake sure you aren't printing anything extra or else we won't be able to validate your answer.", "solution": "for (var i = 0; i < {{ i1 }}; i++)\n  console.log('{{ w1 }}');", "test": "// pass"}, {"gen_template_vars": "words = rand_word_list(rand_int(10, 20))\nres = {\n  'words': words,\n  'value': words[rand_int(0, len(words) - 1)]\n}", "prompt": "Create a function count(words) which returns the number of values in the array words which are NOT equal to \"{{ value }}\" using a while loop.", "problem_name": "count_while_not_array", "hint": "Here's how you can count the number of occurrences of a value in a array using a while loop:\n<pre>\nvar count = 0;\nvar foo = [1,2,3,4,5,5,7,4,5,4,3,6,5];\nvar i = 0;\nwhile (i < foo.length) {\n  if (foo[i] == 5)\n    count = count + 1;\n  i = i + 1;\n}\n</pre>", "solution": "function count(words) {\n  var count = 0;\n  var i = 0;\n  while (i < words.length) {\n    if (words[i] != \"{{ value }}\")\n      count += 1;\n    i += 1;\n  }\n  return count;\n}", "test": "console.log(count([1,2,3,4]));\nconsole.log(count([1,\"{{ value }}\",3,4]));\nconsole.log(count([1,\"{{ value }}\",\"{{ value }}\",4]));\nconsole.log(count([\"{{ value }}\",\"{{ value }}\",\"{{ value }}\"]));"}, {"gen_template_vars": "n = rand_int(2, 5)\nres = {\n  'xs': rand_string_list(20),\n  'n': n,\n  'nth': nth(n)\n}", "prompt": "Write a function called capitalize_every_{{ nth }} that takes a string as its\nargument and returns a new version of it with every {{ nth }} character\ncapitalized, starting with the first character. Any non-letter character should\nremain unchanged.", "problem_name": "capitalize_every_nth", "hint": "Here's code for lowercase_every_3rd which takes a string as its\nargument and returns a new version of it with every 3rd character\nlowercase, starting with the first character:\n<pre>\nfunction lowercase_every_3rd(s) {\n  var res = '';\n  for (var i = 0; i < s.length; i++) {\n    if (i % 3 == 0)\n      res += s[i].toLowerCase();\n    else\n      res += s[i];\n    }\n  return res;\n}\n</pre>", "solution": "function capitalize_every_{{ nth }}(s) {\n  var res = '';\n  for (var i = 0; i < s.length; i++) {\n    if (i % {{ n }} == 0)\n      res += s[i].toUpperCase();\n    else\n      res += s[i];\n  }\n  return res;\n}", "test": "console.log(capitalize_every_{{ nth }}(''));\nfor (var x in {{ xs }})\n  console.log(capitalize_every_{{ nth }}(x));"}, {"gen_template_vars": "res = {\n  'x': rand_int(50, 100),\n}", "prompt": "Create a function called first_function() that takes nothing as arguments and simply returns the number {{ x }}.", "problem_name": "basic_function", "hint": "The syntax to create a function called return_10() that takes in no arguments and simply returns 10 is\n<pre>function return_10() {\n  return 10;\n}\n</pre>", "solution": "function first_function() {\n  return {{ x }};\n}", "test": "console.log(first_function());"}, {"gen_template_vars": "res = {\n  'x': rand_int(5, 100)\n}", "prompt": "Execute the line \"console.log({{ x }});\" and note what it does.", "problem_name": "print_int", "hint": "You should see {{ x }} printed out in the output", "solution": "console.log({{ x }});", "test": "// pass"}, {"gen_template_vars": "res = {}", "prompt": "Write a function called is_leap_year(year) that takes in a year as an input and returns true if the year is a leap year and returns false if the year is not a leap year. Remember years that are divisible by 4 are leap years, with the exception that years that are divisible by 100 are not leap years, with the exception that years that are divisible by 400 are leap years. Then test your function by executing \"console.log(is_leap_year(2000));\", \"console.log(is_leap_year(2012));\", \"console.log(is_leap_year(2013));\", \"console.log(is_leap_year(2100));\".", "problem_name": "is_leap_year", "hint": "Here's code for the add_two function which takes two integers as\narguments and returns their sum:\n<pre>\nfunction add_two(x, y) {\n  return x + y;\n}\n</pre>", "solution": "function is_leap_year(year) {\n  return (year % 4 == 0 && (year % 100 != 0 || year % 400 == 0));\n}\n\nconsole.log(is_leap_year(2000));\nconsole.log(is_leap_year(2012));\nconsole.log(is_leap_year(2013));\nconsole.log(is_leap_year(2100));", "test": "console.log(is_leap_year(200));\nconsole.log(is_leap_year(201));\nconsole.log(is_leap_year(202));\nconsole.log(is_leap_year(2200));\nconsole.log(is_leap_year(2400));"}, {"gen_template_vars": "res = {}", "prompt": "Write a function called add_three that takes three numbers as arguments and\nreturns their sum.", "problem_name": "add_three", "hint": "Here's code for the add_two function which takes two integers as\narguments and returns their sum:\n<pre>\nfunction add_two(x, y) {\n  return x + y;\n}\n</pre>", "solution": "function add_three(x, y, z) {\n  return x + y + z;\n}", "test": "for (var i = -10; i < 10; i++) {\n  for (var j = -10; j < 10; j++) {\n    for (var k = -10; k < 10; k++) {\n      console.log(add_three(i, j, k));\n    }\n  }\n}\nconsole.log(add_three(-1234, 15, 2347));"}, {"gen_template_vars": "res = {\n  'xs': rand_word_list(20)\n}", "prompt": "Write a function called make_all_caps that takes a string as its argument and\nreturns a new version of it with all capital letters. Any non-letter character\nshould remain unchanged.", "problem_name": "make_all_caps", "hint": "Here's code for make_all_lowercase that takes a string as its argument and\nreturns a new version of it with all lowercase letters:\n<pre>\nfunction make_all_lowercase(s) {\n  return s.toLowerCase();\n}\n</pre>", "solution": "function make_all_caps(s) {\n  return s.toUpperCase();\n}", "test": "console.log(make_all_caps(''));\nfor (var x in {{ xs }})\n  console.log(make_all_caps(x));"}, {"gen_template_vars": "n = rand_int(2,5)\nwords = rand_word_list(rand_int(10, 20))\nres = {\n  'words': words,\n  'value': words[rand_int(0, len(words) - 1)],\n  'n': n,\n  'nth': nth(n)\n}", "prompt": "Create a function count_until(words) which returns the number of values in the array before the {{ nth }} occurrence of \"{{ value }}\" using a while loop. The function should return the length of the array if \"{{ value }}\" appears fewer than {{ n }} times in the array.", "problem_name": "count_while_until_nth_array", "hint": "Here's how you can exit a while loop upon encountering a certain value:\n<pre>\nvar count = 0;\nvar foo = [1,2,3,4,5,5,7,4,5,4,3,6,5];\nvar i = 0;\nwhile (i < foo.length) {\n  if (foo[i] != 5)\n    count = count + 1;\n  else\n    break;\n  i = i + 1;\n}\n</pre>", "solution": "function count_until(words) {\n  var count = 0;\n  var i = 0;\n  while (i < words.length) {\n    if (words[i] == \"{{ value }}\") {\n      count += 1;\n      if (count == {{ n }})\n        break;\n    }\n    i += 1;\n  }\n  return i;\n}", "test": "console.log(count_until([1,2,3,4]));\nconsole.log(count_until([1,\"{{ value }}\",\"{{ value }}\"]));\nconsole.log(count_until([1,2,\"{{ value }}\",3,4, \"{{ value }}\", 5,6, \"{{ value }}\", 7,8]));\nconsole.log(count_until([1,2,\"{{ value }}\",3,4, \"{{ value }}\", 5,6, \"{{ value }}\", 7,8, \"{{ value }}\", 4, \"{{ value }}\", 6]));"}, {"gen_template_vars": "res = {\n  'x': rand_word_list(20)\n}", "prompt": "Write a function called maxlen_string(x, y, z) that takes three strings x, y, z as arguments and returns the string with maximum length between them. If two strings have the same length, prioritize returning x over y and y over z.", "problem_name": "maxlen_string", "hint": "Here's code for minlen_string(x, y, z) which takes three strings x, y, z as arguments and returns the string with maximum length between them:\n<pre>\nfunction minlen_string(x, y, z) {\n  if (x.length <= y.length) {\n    if (z.length < x.length)\n      return z;\n    return x;\n  } else if (z.length < y.length)\n    return z;\n  else\n    return y;\n}\n</pre>", "solution": "function maxlen_string(x, y, z) {\n  if (x.length >= y.length) {\n    if (z.length > x.length)\n      return z;\n    return x;\n  } else if (z.length > y.length)\n    return z;\n  else\n    return y;\n}", "test": "for (var i in {{ x }})\n  for (var j in {{ x }})\n    for (var k in {{ x }})\n      console.log(maxlen_string(i, j, k));"}, {"gen_template_vars": "res = {\n  'lst': rand_word_list(rand_int(5, 10)) \n}", "prompt": "Print out every value in {{ lst }} using a for loop.", "problem_name": "print_for_array", "hint": "Here's how you can use a for loop to iterate over a array:\n<pre>\nvar foo = [1,2,3,4,5,6];\nfor (var i = 0; i < foo.length; i++)\n  console.log(foo[i]);\n</pre>", "solution": "var array = {{ lst }};\nfor (var i = 0; i < array.length; i++)\n  console.log(array[i]);", "test": "// pass"}, {"gen_template_vars": "xs = rand_word_list(20)\nys = rand_word_list(20)\nfor i, word in enumerate(ys):\n  if random() < 0.5:\n    n = rand_int(1, len(word))\n    xs[i] = word[:n] + xs[i][n:]\nres = {\n  'xs': xs,\n  'ys': ys\n}", "prompt": "Write a function called max_prefix(x, y) that takes two strings x, y as arguments and returns the number of characters that are the same at the beginning of both x and y. For example, max_prefix(\"hello\", \"hero\") should return 2.", "problem_name": "max_prefix", "hint": "Here's code for max_suffix(x, y) which takes two strings x, y as arguments and returns the number of characters that are the same at the end of both x and y:\n<pre>\nfunction max_suffix(x, y) {\n  for (var i = 1; i < x.length+1; i++) {\n    if (i > y.length)\n      break;\n    if (x[x.length-i] != y[y.length-i])\n      return i - 1;\n  }\n  return y.length;\n}\n</pre>", "solution": "function max_prefix(x, y) {\n  var i = 0;\n  while (i < x.length && i < y.length) {\n    if (x[i] != y[i])\n      break;\n    i += 1;\n  }\n  return i;\n}", "test": "console.log(max_prefix('abcd', 'abcde'));\nconsole.log(max_prefix('abcde', 'abcd'));\nconsole.log(max_prefix('abcd', 'abcd'));\nfor (var x in {{ xs }})\n  for (var y in {{ ys }})\n    console.log(max_prefix(x, y));"}, {"gen_template_vars": "res = {\n  'x': rand_int(3, 9),\n  'n': rand_int(100, 1000)\n}", "prompt": "Print the sum of the first {{ n }} multiples of {{ x }}.", "problem_name": "sum_multiples_num", "hint": "To help you get started, here's how to print the sum of the first 100 integers:\n<pre>\nvar sum = 0;\nvar x = 0;\nfor (var i = 0; i < 100; i++) {\n  x += 1;\n  sum += x;\n}\nconsole.log(sum);\n</pre>", "solution": "var sum = 0;\nvar x = 0;\nfor (var i = 0; i < {{ n }}; i++) {\n  x += {{ x }};\n  sum += x;\n}\nconsole.log(sum);", "test": "// pass"}, {"gen_template_vars": "n = rand_int(3, 6)\nres = {\n  's': rand_sentence(),\n  'n': n,\n  'nth': nth(n)\n}", "prompt": "Print out every {{ nth }} character of the string '{{ s }}', each on a separate\nline, starting with the first character.", "problem_name": "print_every_nth_char", "hint": "Here's code to print every other character of the string \"a gargantuan network\nof pipes\", each on a separate line.\n<pre>\nvar str = 'a gargantuan network of pipes';\nfor (var i = 0; i < str.length; i+=2)\n  console.log(str[i]);\n</pre>", "solution": "var str = '{{ s }}';\nfor (var i = 0; i < str.length; i+={{ n }})\n  console.log(str[i]);", "test": "// pass"}, {"gen_template_vars": "x = rand_letter()\ny = rand_word_list(20)\nfor i, word in enumerate(y):\n  if random() < 0.5:\n    y[i] = x + word\nres = {\n  'x' : x,\n  'y' : y\n}", "prompt": "Write a function called starts_with_{{ x }} that takes a string as an argument\nand returns true if and only if the string starts with the character '{{ x }}'.\nTake capitalization into account.", "problem_name": "str_starts_with_x", "hint": "Here's code for the ends_with_H function which takes a string as an argument and\nreturns true if and only if it ends with the character 'H'.\n<pre>\nfunction ends_with_H(s) {\n  return s.length > 0 && s[0] == 'H';\n}\n</pre>", "solution": "function starts_with_{{ x }}(s) {\n  return s.length > 0 && s[0] == '{{ x }}';\n}", "test": "console.log(starts_with_{{ x }}(''));\nfor (var s in {{ y }})\n  console.log(starts_with_{{ x }}(s));"}, {"gen_template_vars": "words = rand_word_list(rand_int(10, 20))\nres = {\n  'words': words,\n  'value': words[rand_int(0, len(words) - 1)]\n}", "prompt": "Create a function count(words) which returns the number of values in the array words which are NOT equal to \"{{ value }}\" using a for loop.", "problem_name": "count_for_not_array", "hint": "Here's how you can count the number of occurrences of a value in a array using a for loop:\n<pre>\nvar count = 0;\nvar foo = [1,2,3,4,5,5,7,4,5,4,3,6,5];\nfor (var i = 0; i < foo.length; i++) {\n  if (foo[i] == 5)\n    count = count + 1;\n}\n</pre>", "solution": "function count(words) {\n  var count = 0;\n  for (var i = 0; i < words.length; i++) {\n    var word = words[i];\n    if (word != \"{{ value }}\")\n      count += 1;\n  }\n  return count;\n}", "test": "console.log(count([1,2,3,4]));\nconsole.log(count([1,\"{{ value }}\",3,4]));\nconsole.log(count([1,\"{{ value }}\",\"{{ value }}\",4]));\nconsole.log(count([\"{{ value }}\",\"{{ value }}\",\"{{ value }}\"]));"}, {"gen_template_vars": "res = {\n  'x' : rand_sidict()\n}", "prompt": "Write a function called max_property that takes a nonempty object mapping\nstring properties to integers and returns the property that's mapped to the maximum value in\nthe object. If multiple words are mapped to the same maximum value, return\nthe one that comes first in the object.", "problem_name": "max_property", "hint": "Here's code for the min_property function which takes an object mapping string properties to\nintegers as an argument and returns the string that's mapped to the minimum\nvalue in the object:\n<pre>\nfunction min_property(d) {\n  var min_num = Infinity;\n  var min_word = '';\n  for (var word in d) {\n    var num = d[word];\n    if (num < max_num) {\n      min_num = num;\n      min_word = word;\n    }\n  }\n\n  return min_word;\n}\n</pre>", "solution": "function max_property(d) {\n  var max_num = -Infinity;\n  var max_word = '';\n  for (var word in d) {\n    var num = d[word];\n    if (num > max_num) {\n      max_num = num;\n      max_word = word;\n    }\n  }\n\n  return max_word;\n}", "test": "console.log(max_property({'bob': 5}));\nconsole.log(max_property({'a': -4, 'b': 0, 'c': 0}));\nconsole.log(max_property({{ x }}));"}, {"gen_template_vars": "res = {\n  'nums': rand_int_list(rand_int(10, 20))\n}", "prompt": "Create a function count_even(nums) which returns the number of even values in nums using a for loop.", "problem_name": "count_for_even_nums", "hint": "Here's how you can check if a number is odd:\n<pre>\nvar num = 5;\nif (num % 2 == 0)\n  console.log('even');\nelse\n  console.log('odd');\n</pre>", "solution": "function count_even(nums) {\n  var count = 0;\n  for (var i = 0; i < nums.length; i++) {\n    if (nums[i] % 2 == 0) {\n      count += 1;\n    }\n  }\n  return count;\n}", "test": "console.log(count_even([1,3,5,7]));\nconsole.log(count_even([0,3,5,7]));\nconsole.log(count_even([0,2,3,7]));\nconsole.log(count_even([0,2,4,7]));\nconsole.log(count_even([0,2,4,6]));"}, {"gen_template_vars": "x = rand_int_list(100)\ni = rand_int(10, 90)\nn = rand_int(-50, 50)\nx[i] = n\nx[i+5] = n\nres = {\n  'x' : rand_int_list(100),\n  'n' : n\n}", "prompt": "Write a function called index_of that takes two arguments array and x, where array\nis an array of integers and x is an integer, and returns the first index of x\nin array. If x is not in array, index_of should return -1. For example,\nindex_of([-4, 3, 47, 0], 47) should return 2.", "problem_name": "index_of", "hint": "Here's code for the index_of_23 function which takes a array of integers as\nan argument and returns the index of the first 23 it finds:\n<pre>\nfunction index_of_23(array) {\n  var idx = -1;\n  for (var i = 0; i < array.length; i++) {\n    if (array[i] == 23) {\n      idx = i;\n      break;\n    }\n  }\n  return idx;\n}\n</pre>", "solution": "function index_of(array, x) {\n  var idx = -1;\n  for (var i = 0; i < array.length; i++) {\n    if (array[i] == x) {\n      idx = i;\n      break;\n    }\n  }\n  return idx;\n}", "test": "console.log(index_of([], 2));\nconsole.log(index_of([23], 23));\nconsole.log(index_of([23], 5));\nconsole.log(index_of({{ x }}, {{ n }}));"}, {"gen_template_vars": "res = {\n  'x': rand_int(2, 100)\n}", "prompt": "Write a function called is_not_{{ x }}(number) that takes in one argument (one number as input) and returns true if that number is not equal to {{ x }}. Then execute the line \"console.log(is_not_{{ x }}(100));\" to test if your function works.", "problem_name": "is_not_x", "hint": "The syntax to print if two numbers are not equal to each other is\n<pre> console.log(5 != 1); // this will print true\nconsole.log(5 != 5); // this will print false\n</pre>\nThe syntax to define a function called returnTrue that always returns True is\n<pre> function returnTrue() {\n  return true;\n}\n</pre>", "solution": "function is_not_{{ x }}(number) {\n  return number != {{ x }};\n}\nconsole.log(is_not_{{ x }}(100));", "test": "console.log(is_not_{{ x }}({{ x }}));\nconsole.log(is_not_{{ x }}(5));\nconsole.log(is_not_{{ x }}(6));\nconsole.log(is_not_{{ x }}(1));\nconsole.log(is_not_{{ x }}(2));"}, {"gen_template_vars": "n = rand_int(3, 50)\nres = {\n  'x' : rand_int_list(1000),\n  'n' : n\n}", "prompt": "Write a function called array_multiply_{{ n }} that takes an array of integers as\nan argument and returns a array of each of its elements multiplied by {{ n }}.", "problem_name": "array_multiply_n", "hint": "Here's code for the array_add_5 function which takes a array of integers\nas an argument and returns a array of each of its elements added to 5:\n<pre>\nfunction array_add_5(array) {\n  var res = [];\n  for (var i = 0; i < array.length; i++) {\n    res.append(array[i] + 5);\n  }\n  return res;\n}\n</pre>", "solution": "function array_multiply_{{ n }}(array) {\n  var res = [];\n  for (var i = 0; i < array.length; i++) {\n    res.push(array[i] * {{ n }});\n  }\n  return res;\n}", "test": "console.log(array_multiply_{{ n }}([]));\nconsole.log(array_multiply_{{ n }}([23]));\nconsole.log(array_multiply_{{ n }}({{ x }}));"}, {"gen_template_vars": "x = rand_word_list(20)\ny = rand_word_list(20)\nfor i, w in enumerate(x):\n  if random() < 0.5:\n    x[i] = w.upper()\nfor i, w in enumerate(y):\n  if random() < 0.5:\n    y[i] = w.upper()\nres = {\n  'x' : x,\n  'y' : y\n}", "prompt": "Write a function called alphabetical(x, y) that takes two strings x and y as arguments and returns true if and only if x comes before y in the alphabet. Ignore capitalization.", "problem_name": "alphabetical", "hint": "Here's code for the reverse_alphabetical function which takes two strings x\nand y as arguments and returns true if and only if x comes after y in the\nalphabet, ignoring capitalization.\n<pre>\nfunction reverse_alphabetical(x, y) {\n  return x.toLowerCase() > y.toLowerCase();\n}\n</pre>", "solution": "function alphabetical(x, y) {\n  return x.toLowerCase() < y.toLowerCase();\n}", "test": "for (var i = 0; i < {{ x }}.length; i++) {\n  var x = {{ x }}[i];\n  for (var j = 0; j < {{ x }}.length; j++) {\n    var y = {{ x }}[j];\n    console.log(alphabetical(x, y));\n  }\n}"}, {"gen_template_vars": "res = {\n  'x': rand_int(-100, 100),\n  'y': rand_int(-100, 100),\n  'z': rand_int(-100, 100),\n  'as': rand_int_list(10),\n  'bs': rand_int_list(10),\n  'cs': rand_int_list(10),\n  'op0': choice(['+', '-', '*']),\n  'op1': choice(['+', '-', '*'])\n}", "prompt": "Write a function called arith0(x, y, z) that takes three integers x, y, z as\narguments and returns (x {{ op0 }} y) {{ op1 }} z. Then, write another function\narith1(x, y, z) that takes three integers x, y, z as arguments and\nreturns (arith0(x, y, z) {{ op0 }} arith0(x, y, z)) {{ op1 }} arith0(x, y, z).\nFinally, print arith0({{ x }}, {{ y }}, {{ z }}) and print\narith1({{ x }}, {{ y }}, {{ z }}).", "problem_name": "arith_funcs", "hint": "Did you remember to call both your functions to test them at the end of the\nprogram?<br>\nHere's a function called arith2(x, y, z) that takes three integers x, y, z as\narguments and returns (arith1(x, y, z) - arith1(x, y, z)) * arith1(x, y, z):\n<pre>\nfunction arith2(x, y, z) {\n  var a1 = arith1(x, y, z);\n  return (a1 - a1) * a1;\n}\n</pre>", "solution": "function arith0(x, y, z) {\n  return (x {{ op0 }} y) {{ op1 }} z;\n}\n\nfunction arith1(x, y, z) {\n  var a0 = arith0(x, y, z);\n  return (a0 {{ op0 }} a0) {{ op1 }} a0;\n}\n\nconsole.log(arith0({{ x }}, {{ y }}, {{ z }}));\nconsole.log(arith1({{ x }}, {{ y }}, {{ z }}));", "test": "for (var a in {{ as }}) {\n  for (var b in {{ bs }}) {\n    for (var c in {{ cs }}) {\n      console.log(arith0(a, b, c));\n      console.log(arith1(a, b, c));\n    }\n  }\n}"}, {"gen_template_vars": "words = rand_word_list(rand_int(10, 20))\nres = {\n  'words': words,\n  'value': words[rand_int(0, len(words) - 1)]\n}", "prompt": "Create a function count_until(words) which returns the number of values in the array before the first occurrence of \"{{ value }}\" using a while loop. The function should return the length of the array if \"{{ value }}\" is not in the array.", "problem_name": "count_while_until_array", "hint": "Here's how you can exit a while loop upon encountering a certain value:\n<pre>\nvar count = 0;\nvar foo = [1,2,3,4,5,5,7,4,5,4,3,6,5];\nvar i = 0;\nwhile (i < foo.length) {\n  if (foo[i] != 5)\n    count = count + 1;\n  else\n    break;\n  i = i + 1;\n}\n</pre>", "solution": "function count_until(words) {\n  var count = 0;\n  var i = 0;\n  while (i < words.length) {\n    if (words[i] != \"{{ value }}\")\n      count += 1;\n    else\n      break;\n    i += 1;\n  }\n  return count;\n}", "test": "console.log(count_until([1,2,3,4]));\nconsole.log(count_until([1,\"{{ value }}\"]));\nconsole.log(count_until([1,2,\"{{ value }}\"]));\nconsole.log(count_until([1,2,3,\"{{ value }}\"]));"}, {"gen_template_vars": "res = {\n  'x': rand_word()\n}", "prompt": "Write a function called print_n_{{ x }} that takes an integer as its argument\nand prints \"{{ x }}\" that many times, on separate lines. The function should not\nreturn anything.", "problem_name": "print_n_str", "hint": "Here's a function called print_9_x that takes a string as its argument and\nprints it 9 times, on separate lines:\n<pre>\nfunction print_9_x(s) {\n  for (var i = 0; i < 9; i++) {\n    console.log(s);\n  }\n}\n</pre>", "solution": "function print_n_{{ x }}(n) {\n  for (var i = 0; i < n; i++) {\n    console.log('{{ x }}');\n  }\n}", "test": "for (var i = 0; i < 20; i++) {\n  console.log(print_n_{{ x }}(i));\n}"}, {"gen_template_vars": "n = rand_int(3, 6)\nres = {\n  's': rand_sentence(),\n  'n': n,\n  'nth': nth(n)\n}", "prompt": "Take every {{ nth }} character of the string '{{ s }}', starting with the first\ncharacter, and make a new string that is the concatenation of all of them. Then,\nprint out this new string.", "problem_name": "concat_every_nth_char", "hint": "Here's code to concatenate every other character of the string \"a gargantuan\nnetwork of pipes\", and print the resulting string:\n<pre>\nvar str = 'a gargantuan network of pipes';\nvar res = '';\nfor (var i = 0; i < str.length; i+=2)\n  res += str[i];\nconsole.log(res);\n</pre>", "solution": "var str = '{{ s }}';\nvar res = '';\nfor (var i = 0; i < str.length; i+= {{ n }})\n  res += str[i];\nconsole.log(res);", "test": "// pass"}, {"gen_template_vars": "res = {\n  'x': rand_sentence_list(20)\n}", "prompt": "Write a function called reverse_sentence that takes a sentence string as its argument and returns a new string with all the same words (separated by spaces) in reverse order that they appeared in the original string. You may assume all words are separated by a single space, and the sentence does not begin or end with any spaces.", "problem_name": "reverse_sentence", "hint": "Here's code for the every_other_word function that takes a string as its\nargument and returns a new string made out of every other word of the string:\n<pre>\nfunction every_other_word(s) {\n  var word_array = s.split(' ');\n  var every_other_word_array = [];\n  for (var i = 0; i < word_array.length; i+=2) {\n    every_other_word_array.push(word_array[i]);\n  }\n  return every_other_word_array.join(' ');\n</pre>", "solution": "function reverse_sentence(s) {\n  var word_array = s.split(' ');\n  var reverse_word_array = [];\n  for (var i = word_array.length - 1; i >= 0; i--) {\n    reverse_word_array.push(word_array[i]);\n  }\n  return reverse_word_array.join(' ');\n}", "test": "console.log(reverse_sentence(''));\nfor (var s in {{ x }})\n  console.log(reverse_sentence(s));"}, {"gen_template_vars": "res = {\n  'x' : rand_int_list(100)\n}", "prompt": "Write a function called average_array that takes a nonempty array of integers as\nan argument and returns their average (aka the mean).", "problem_name": "average_array", "hint": "Here's code for the average_three function which takes a three integers as an\nargument and returns their average:\n<pre>\nfunction average_three(x, y, z) {\n  return (x + y + z) / 3;\n}\n</pre>", "solution": "function average_array(array) {\n  var sum = 0;\n  for (var i = 0; i < array.length; i++) {\n    sum += array[i];\n  }\n  return sum / array.length;\n}", "test": "console.log(average_array([23]));\nconsole.log(average_array({{ x }}));"}, {"gen_template_vars": "res = {\n  'x': rand_int(2, 10)\n}", "prompt": "Write a function called is_divisible_by_{{ x }}(number) that takes in one argument (one number as input) and returns true if that number is divisible by x. Then execute the line \"console.log(is_divisible_by_{{ x }}(10));\" to test if your function works.", "problem_name": "is_divisible_by_x", "hint": "The syntax to check and print if one number is divisible by 3 is\n<pre> console.log(5 % 3 == 0); // this will return false since 5 mod 3 is equal to 2. % just returns the remainder when dividing\nconsole.log(6 % 3 == 0); // this will return true since 6 mod 3 is equal to 0.\n</pre>\nThe syntax to define a function called returnTrue that always returns true is\n<pre> function returnTrue() {\n  return true;\n}\n</pre>", "solution": "function is_divisible_by_{{ x }}(number) {\n  return number % {{ x }} == 0;\n}\n\nconsole.log(is_divisible_by_{{ x }}(10));", "test": "console.log(is_divisible_by_{{ x }}(3));\nconsole.log(is_divisible_by_{{ x }}(5));\nconsole.log(is_divisible_by_{{ x }}(6));\nconsole.log(is_divisible_by_{{ x }}(2));\nconsole.log(is_divisible_by_{{ x }}(1));"}, {"gen_template_vars": "res = {\n  'start': randint(1, 100),\n  'end': randint(200, 300)\n}", "prompt": "Print out every number from {{ start }} to {{ end }}, inclusive, using a for\nloop.", "problem_name": "print_for_range", "hint": "Here's how you can write a for loop from 1 to 10, inclusive:\n<pre>\nfor (var i = 0; i < 10+1; i++)\n  console.log(i);\n</pre>", "solution": "for (var i = {{ start }}; i < {{ end }}+1; i++)\n  console.log(i);", "test": "// pass"}, {"gen_template_vars": "res = {\n  'random_list': [rand_int(1, 10) for i in range(rand_int(10, 14))]\n}", "prompt": "Create a function called length_of_array(array) that takes in a array and returns the number of elements in the array. Then verify that your function works by executing \"console.log(length_of_array({{ random_list }}));\"", "problem_name": "length_of_array", "hint": "Here's code for the print_2_appears(array) function that takes a array as input and prints \"2 appears\" for each time two appears in the array\n<pre>\nfunction print_array(array) {\n  for (var i = 0; i < array.length; i++) {\n    var num = array[i];\n    if (num % 2 == 0)\n      console.log(\"2 appears\");\n  }\n}\n</pre>\nHere's code for sum(array) function that takes a array as input and returns the sum of the elements in the array.\n<pre>\nfunction sum(array) {\n  var total = 0;\n  for (var i = 0; i < array.length; i++) {\n    total = total + array[i];\n  }\n  return total;\n}", "solution": "function length_of_array(array) {\n  return array.length;\n}\nconsole.log(length_of_array({{ random_list }}));", "test": "console.log(length_of_array([1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10]));\nconsole.log(length_of_array([1,1,1,2,2,2,2,3,3,3,3,3,4,4,4,4,4,4,5,5,5,5,5,5,5,6,6,6,6,6,6,6,6,7,7,7,7,7,7,8,8,8,8,8,9,9,9,9,10,10,10,10]));"}, {"gen_template_vars": "res = {\n  'x' : rand_int_list(100)\n}", "prompt": "Write a function called max_array that takes a non-empty array of integers as an\nargument and returns the maximum number in the array.", "problem_name": "max_array", "hint": "Here's code for the min_array function which takes a array of integers as an\nargument and returns their minimum:\n<pre>\nfunction min_array(array) {\n  var min_num = Infinity;\n  for (var i = 0; i < array.length; i++) {\n    if (array[i] < min_num)\n      min_num = array[i];\n  }\n  return min_num;\n}\n</pre>", "solution": "function max_array(array) {\n  var max_num = -Infinity;\n  for (var i = 0; i < array.length; i++) {\n    if (array[i] > max_num)\n      max_num = array[i];\n  }\n  return max_num;\n}", "test": "console.log(max_array([23]));\nconsole.log(max_array({{ x }}));"}, {"gen_template_vars": "n = randint(2, 10)\nres = {\n  'start': randint(1, 100),\n  'end': randint(200, 300),\n  'n': n,\n  'nth': nth(n)\n}", "prompt": "Print out every {{ nth }} number from {{ start }} to {{ end }} using a while loop.", "problem_name": "print_while_nth_range", "hint": "Here's how you can write a while loop for every 3rd number from 1 to 10:\n<pre>\nvar i = 1;\nwhile (i <= 10) {\n  console.log(i);\n  i = i + 3;\n}\n</pre>", "solution": "var i = {{ start }};\nwhile (i <= {{ end }}) {\n  console.log(i);\n  i = i + {{ n }};\n}", "test": "// pass"}, {"gen_template_vars": "res = {\n  'to_print': rand_choice(['hello', 'i like chicken', 'apples taste good', 'mmm chocolate!'])\n}", "prompt": "Print the string \"{{ to_print }}\"", "problem_name": "print", "hint": "The syntax to print the string \"lol\" is\n<pre>console.log(\"lol\");\n</pre>", "solution": "console.log(\"{{ to_print }}\");", "test": "// pass"}, {"gen_template_vars": "res = {\n  'var_name': rand_word(),\n  'x': rand_int(10, 100),\n  'var_name1': rand_word(),\n  'y': rand_int(10, 1000)\n}", "prompt": "Create a variable called {{ var_name }} and set the value of {{ var_name }} to be {{ x }}. Create another variable called {{ var_name1 }} and set the value of {{ var_name1 }} to be {{ y }}. Print the quotient of {{ var_name }} and {{ var_name1 }} by executing the line \"console.log({{ var_name }} / {{ var_name1 }});\". What's something you notice about the result?", "problem_name": "divide_variables", "hint": "The syntax to create a variable called num_chickens and set the value of num_chickens to be 5 is\n<pre>var num_chickens = 5;\n</pre>", "solution": "var {{ var_name }} = {{ x }};\nvar {{ var_name1 }} = {{ y }};\nconsole.log({{ var_name }} / {{ var_name1 }});", "test": "console.log({{ var_name }});\nconsole.log({{ var_name1 }});"}]