{"and": {"explanation": "<a href=\"http://www.greenteapress.com/thinkpython/thinkCSpy/html/chap04.html#3\">http://www.greenteapress.com/thinkpython/thinkCSpy/html/chap04.html#3</a>\n", "display_name": "and\n"}, "compare": {"explanation": "<a href=\"http://www.greenteapress.com/thinkpython/thinkCSpy/html/chap04.html#2\">http://www.greenteapress.com/thinkpython/thinkCSpy/html/chap04.html#2</a>\n<a href=\"http://www.greenteapress.com/thinkpython/thinkCSpy/html/chap07.html#5\">http://www.greenteapress.com/thinkpython/thinkCSpy/html/chap07.html#5</a>\n", "display_name": "comparison\n"}, "gt": {"explanation": "<a href=\"http://www.greenteapress.com/thinkpython/thinkCSpy/html/chap04.html#2\">http://www.greenteapress.com/thinkpython/thinkCSpy/html/chap04.html#2</a>\n<a href=\"http://www.greenteapress.com/thinkpython/thinkCSpy/html/chap07.html#5\">http://www.greenteapress.com/thinkpython/thinkCSpy/html/chap07.html#5</a>\n", "display_name": "greater than\n"}, "func_len": {"explanation": "<a href=\"http://www.greenteapress.com/thinkpython/thinkCSpy/html/chap07.html#2\">http://www.greenteapress.com/thinkpython/thinkCSpy/html/chap07.html#2</a>\n<a href=\"http://www.greenteapress.com/thinkpython/thinkCSpy/html/chap08.html#3\">http://www.greenteapress.com/thinkpython/thinkCSpy/html/chap08.html#3</a>\n", "display_name": "len function\n"}, "pow": {"explanation": "<a href=\"http://www.greenteapress.com/thinkpython/thinkCSpy/html/chap02.html#6\">http://www.greenteapress.com/thinkpython/thinkCSpy/html/chap02.html#6</a>\n", "display_name": "exponentiation\n"}, "augassign": {"explanation": "The <b>augmented assignment statement</b> updates a variable to take\non a new value:\n<pre>\nsentence = 'Don't worry, be '   # Normal assignment statement\nsentence += 'happy'             # Appends the string \"happy\" to the end of sentence\ncount += 1                      # Increments count by 1\nproduct *= count                # Multiplies product by count\n</pre>\n<p>\nWe pronounce these new operators \"plus equals\" and \"times equals\".\nWe can \"augment\" the equals sign with any arithmetic operand on the left,\nso our \"augmented assignment\" operators in Python include +=, *=, -=, /=, %=,\nand **=. In all cases the augmented assignment \"some_var <op>= other_var\" is\nequivalent to writing the normal assignment statement\n\"some_var = some_var <op> other_var\".\n</p>\n", "display_name": "augmented assignment\n"}, "func_sorted": {"explanation": "The sorted function takes a list of sortable elements and returns a sorted\nversion of it:\n<pre>\n>>> some_nums = [47, 23, 0, -100, 5]\n>>> print sorted(sum_nums)\n[-100, 0, 5, 23, 47]\n>>> some_words = ['banana', 'apple', 'persimmon', 'Kiwi', 'orange']\n>>> print sorted(sum_nums)\n['Kiwi', 'apple', 'banana', 'orange', 'persimmon']\n</pre>\n<p>\nNumbers in a list will be sorted in ascending order, and strings in a list\nwill be sorted in alphabetical order.\n</p>\n<p>\nWhy does uppercase 'Kiwi' come before all the rest of the words in our sorted\nword list? We have to take a behind-the-scenes look at string comparison in\norder to understand this behavior.\n</p>\n<p>\nIn order to sort strings, Python first converts all the characters in them into\ntheir corresponding numeric ASCII code value, and then compares these codes\nto determine which letters come before one another in the alphabet.\nYou can see the\nmappings between characters and ASCII codes by examining the 'Chr' and 'Dec'\ncolumns of this table:\n<a href=\"http://www.asciitable.com\">http://www.asciitable.com</a>.</p>\n<p>\nSince all uppercase letters have lower-numbered codes than lowercase letters in\nthat chart, in any sorted list all uppercase words will come before any\nlowercase words!\n</p>\n", "display_name": "sorted function\n"}, "func_float": {"explanation": "<a href=\"http://www.greenteapress.com/thinkpython/thinkCSpy/html/chap03.html#2\">http://www.greenteapress.com/thinkpython/thinkCSpy/html/chap03.html#2</a>\n", "display_name": "float function\n"}, "num": {"explanation": "<a href=\"http://www.greenteapress.com/thinkpython/thinkCSpy/html/chap02.html#1\">http://www.greenteapress.com/thinkpython/thinkCSpy/html/chap02.html#1</a>\n", "display_name": "numbers\n"}, "in": {"explanation": "<a href=\"http://www.greenteapress.com/thinkpython/thinkCSpy/html/chap08.html#4\">http://www.greenteapress.com/thinkpython/thinkCSpy/html/chap08.html#4</a>\n", "display_name": "in\n"}, "func_range": {"explanation": "<a href=\"http://www.greenteapress.com/thinkpython/thinkCSpy/html/chap08.html#1\">http://www.greenteapress.com/thinkpython/thinkCSpy/html/chap08.html#1</a>\n", "display_name": "range function\n"}, "eq": {"explanation": "<a href=\"http://www.greenteapress.com/thinkpython/thinkCSpy/html/chap04.html#2\">http://www.greenteapress.com/thinkpython/thinkCSpy/html/chap04.html#2</a>\n<a href=\"http://www.greenteapress.com/thinkpython/thinkCSpy/html/chap07.html#5\">http://www.greenteapress.com/thinkpython/thinkCSpy/html/chap07.html#5</a>\n", "display_name": "equal\n"}, "if": {"explanation": "<a href=\"http://www.greenteapress.com/thinkpython/thinkCSpy/html/chap04.html#4\">http://www.greenteapress.com/thinkpython/thinkCSpy/html/chap04.html#4</a>\n", "display_name": "if statements\n"}, "index": {"explanation": "<a href=\"http://www.greenteapress.com/thinkpython/thinkCSpy/html/chap07.html#1\">http://www.greenteapress.com/thinkpython/thinkCSpy/html/chap07.html#1</a>\n<a href=\"http://www.greenteapress.com/thinkpython/thinkCSpy/html/chap08.html#2\">http://www.greenteapress.com/thinkpython/thinkCSpy/html/chap08.html#2</a>\n", "display_name": "index\n"}, "slice": {"explanation": "<a href=\"http://www.greenteapress.com/thinkpython/thinkCSpy/html/chap07.html#4\">http://www.greenteapress.com/thinkpython/thinkCSpy/html/chap07.html#4</a>\n<a href=\"http://www.greenteapress.com/thinkpython/thinkCSpy/html/chap08.html#7\">http://www.greenteapress.com/thinkpython/thinkCSpy/html/chap08.html#7</a>\n", "display_name": "slice\n"}, "sub": {"explanation": "<a href=\"http://www.greenteapress.com/thinkpython/thinkCSpy/html/chap02.html#6\">http://www.greenteapress.com/thinkpython/thinkCSpy/html/chap02.html#6</a>\n", "display_name": "subtraction\n"}, "for": {"explanation": "<a href=\"http://www.greenteapress.com/thinkpython/thinkCSpy/html/chap07.html#3\">http://www.greenteapress.com/thinkpython/thinkCSpy/html/chap07.html#3</a>\n<a href=\"http://www.greenteapress.com/thinkpython/thinkCSpy/html/chap08.html#5\">http://www.greenteapress.com/thinkpython/thinkCSpy/html/chap08.html#5</a>\n", "display_name": "for loop\n"}, "tuple": {"explanation": "<a href=\"http://www.greenteapress.com/thinkpython/thinkCSpy/html/chap09.html#1\">http://www.greenteapress.com/thinkpython/thinkCSpy/html/chap09.html#1</a>\n", "display_name": "tuple\n"}, "func_append": {"explanation": "The <b>append function</b> appends an item to the end of a list:\n<pre>\nprimes = [2, 3, 5]\nprimes.append(7)\nprimes.append(11)\nprint primes             # prints [2, 3, 5, 7, 11]\n</pre>\n<p>\nWe can append as many items as we want to any list during program execution.\n</p>\n\n", "display_name": "append function\n"}, "ifexp": {"explanation": "<p>\nAn <b>if expression</b> is a way to put an if statement entirely on one\nline:\n</p>\n<pre>\n>>> jury_mood = 'sympathetic'\n>>> verdict = 'innocent' if jury_mood == 'sympathetic' else 'guilty'\n>>> emotion = 'distraught' if verdict == 'guilty' else 'elated'\n>>> print 'the jury was feeling ' + jury_mood\nthe jury was feeling sympathetic\n>>> print 'the verdict was ' + verdict\nthe verdict was innocent\n>>> print 'the defendant was ' + emotion\nthe defendant was elated\n</pre>\n<p>\nIf expressions must be written on one line and are of the form\n<pre>some_var = true_result if some_condition else false_result</pre>\nafter which some_var will be assigned to true_result if some_condition is true\nand false_result otherwise.\n</p>\n", "display_name": "if expression\n"}, "add": {"explanation": "<a href=\"http://www.greenteapress.com/thinkpython/thinkCSpy/html/chap02.html#6\">http://www.greenteapress.com/thinkpython/thinkCSpy/html/chap02.html#6</a>\n<a href=\"http://www.greenteapress.com/thinkpython/thinkCSpy/html/chap08.html#6\">http://www.greenteapress.com/thinkpython/thinkCSpy/html/chap08.html#6</a>\n", "display_name": "addition\n"}, "lt": {"explanation": "<a href=\"http://www.greenteapress.com/thinkpython/thinkCSpy/html/chap04.html#2\">http://www.greenteapress.com/thinkpython/thinkCSpy/html/chap04.html#2</a>\n<a href=\"http://www.greenteapress.com/thinkpython/thinkCSpy/html/chap07.html#5\">http://www.greenteapress.com/thinkpython/thinkCSpy/html/chap07.html#5</a>\n", "display_name": "less than\n"}, "call": {"explanation": "<a href=\"http://www.greenteapress.com/thinkpython/thinkCSpy/html/chap03.html#1\">http://www.greenteapress.com/thinkpython/thinkCSpy/html/chap03.html#1</a>\n", "display_name": "function calls\n"}, "functiondef": {"explanation": "<a href=\"http://www.greenteapress.com/thinkpython/thinkCSpy/html/chap03.html#6\">http://www.greenteapress.com/thinkpython/thinkCSpy/html/chap03.html#6</a>\n", "display_name": "function definitions\n"}, "attribute": {"explanation": "<a href=\"http://www.greenteapress.com/thinkpython/thinkCSpy/html/chap12.html#2\">http://www.greenteapress.com/thinkpython/thinkCSpy/html/chap12.html#2</a>\n", "display_name": "attribute\n"}, "print": {"explanation": "<a href=\"http://www.greenteapress.com/thinkpython/thinkCSpy/html/chap01.html#5\">http://www.greenteapress.com/thinkpython/thinkCSpy/html/chap01.html#5</a>\n", "display_name": "print statement\n"}, "func_int": {"explanation": "<a href=\"http://www.greenteapress.com/thinkpython/thinkCSpy/html/chap03.html#2\">http://www.greenteapress.com/thinkpython/thinkCSpy/html/chap03.html#2</a>\n", "display_name": "int function\n"}, "subscript": {"explanation": "<a href=\"http://www.greenteapress.com/thinkpython/thinkCSpy/html/chap07.html#1\">http://www.greenteapress.com/thinkpython/thinkCSpy/html/chap07.html#1</a>\n<a href=\"http://www.greenteapress.com/thinkpython/thinkCSpy/html/chap08.html#2\">http://www.greenteapress.com/thinkpython/thinkCSpy/html/chap08.html#2</a>\n", "display_name": "subscript\n"}, "gte": {"explanation": "<a href=\"http://www.greenteapress.com/thinkpython/thinkCSpy/html/chap04.html#2\">http://www.greenteapress.com/thinkpython/thinkCSpy/html/chap04.html#2</a>\n<a href=\"http://www.greenteapress.com/thinkpython/thinkCSpy/html/chap07.html#5\">http://www.greenteapress.com/thinkpython/thinkCSpy/html/chap07.html#5</a>\n", "display_name": "greater than or equal\n"}, "usub": {"explanation": "In Python, we can use the \"unary minus\" to negate a number:\n<pre>\npos_num = 23\nneg_num = -47\npow_num = -4**2\n</pre>\nThe exponentiation operator takes precedence over the negation\noperator if the negation operator is on its left. So in the\nabove example, the value of pow_num is -16.\n", "display_name": "unary subtraction\n"}, "func_split": {"explanation": "<p>\nThe <b>split function</b> breaks a string into a list of words. By default, any\n number of whitespace characters is considered a word boundary:\n</p>\n<pre>\n>>> song = \"The rain in Spain...\"\n>>> print song.split()\n['The', 'rain', 'in', 'Spain...']\n</pre>\n<p>\nAn optional argument called a delimiter can be used to specify which characters\nto use as word boundaries. The following example uses the string 'ai' as the\ndelimiter:\n</p>\n<pre>\n>>> print song.split('ai')\n['The r', 'n in Sp', 'n...']\n</pre>\n<p>\nNotice that the delimiter doesn't appear in the list.\n</p>\n<p>\nThe <b>join function</b> is the inverse of split. You call it on a delimiter\nstring, and it takes a list of strings and concatenates the elements with that\ndelimiter between each pair:\n</p>\n<pre>\n>>> list = ['The', 'rain', 'in', 'Spain...']\n>>> print ' '.join(list)\nThe rain in Spain...\n</pre>\n<p>\nWe can specify any string as our delimiter to insert between elements:\n</p>\n<pre>\n>>> print '_'.join(list)\n'The_rain_in_Spain...'\n</pre>\n<p>\nAs an exercise, describe the relationship between ' '.join(song.split()) and song. Are they the same for all strings? When would they be different?\n</p>\n", "display_name": "split function\n"}, "func_lower": {"explanation": "<p>\nThe <b>lower function</b> converts a string to all lowercase letters:\n</p>\n<pre>\nlower_word = 'jELLo23'.lower()\nprint lower_word             # prints 'jello23'\n</pre>\n<p>\nAny lowercase letters or non-alphabet characters in the string remain unchanged.\n</p>\n<p>\nThe <b>upper function</b> converts a string to all uppercase letters:\n</p>\n<pre>\nupper_word = 'jELLo23'.upper()\nprint upper_word             # prints 'JELLO23'\n</pre>\n<p>\nAny uppercase letters or non-alphabet characters in the string remain unchanged.\n</p>\n", "display_name": "lower function\n"}, "notin": {"explanation": "<a href=\"http://www.greenteapress.com/thinkpython/thinkCSpy/html/chap08.html#4\">http://www.greenteapress.com/thinkpython/thinkCSpy/html/chap08.html#4</a>\n", "display_name": "notin\n"}, "return": {"explanation": "<a href=\"http://www.greenteapress.com/thinkpython/thinkCSpy/html/chap05.html#1\">http://www.greenteapress.com/thinkpython/thinkCSpy/html/chap05.html#1</a>\n", "display_name": "return\n"}, "str": {"explanation": "<a href=\"http://www.greenteapress.com/thinkpython/thinkCSpy/html/chap02.html#1\">http://www.greenteapress.com/thinkpython/thinkCSpy/html/chap02.html#1</a>\n", "display_name": "strings\n"}, "func_ord": {"explanation": "The <b>chr function</b> takes an integer i as an argument and\nreturns a string of a single character whose ASCII code is i:\n<pre>\nsome_char = chr(97)\nprint some_char          # prints 'a'\nanother_char = chr(74)\nprint another_char       # prints 'J'\n</pre>\n<p>\nThe argument must be in the range [0..255], inclusive; ValueError will be raised\nif i is outside that range.\n</p>\n<p>\nHere's a table mapping characters to their ASCII codes (we are only\nconcerned with the \"Dec\" and \"Chr\" columns):\n<a href=\"http://www.asciitable.com\">http://www.asciitable.com</a></p>\nThe <b>ord function</b> takes a string of length one as an argument and returns\nits ASCII code as an integer:\n<pre>\nsome_ascii_code = ord('a')\nprint some_ascii_code          # prints 97\nanother_ascii_code = ord('J')\nprint another_ascii_code       # prints 74\n</pre>\n<p>\nThe ord function is the inverse of the chr function. So, if i is an integer,\nwe know ord(chr(x)) simply returns i back to us, and if ch is a character,\nwe know chr(ord(chr)) simply returns ch back to us.\n</p>\n\n\n", "display_name": "ord function\n"}, "binop": {"explanation": "<a href=\"http://www.greenteapress.com/thinkpython/thinkCSpy/html/chap02.html#6\">http://www.greenteapress.com/thinkpython/thinkCSpy/html/chap02.html#6</a>\n", "display_name": "binary operations\n"}, "boolop": {"explanation": "<a href=\"http://www.greenteapress.com/thinkpython/thinkCSpy/html/chap04.html#2\">http://www.greenteapress.com/thinkpython/thinkCSpy/html/chap04.html#2</a>\n", "display_name": "boolean operations\n"}, "break": {"explanation": "<p>\nThe <b>break</b> statement allows us to immediately break out of a loop:\n</p>\n<pre>\nfood_list = ['serendipity', 'laundromat', 'bagel', 'hippopotamus']\nwords_before_bagel = 0\nfor word in food_list:\n  if word != 'bagel':\n    words_before_bagel += 1\n  else:\n    break\nprint words_before_bagel + \" words found before 'bagel' in food_list\"\n</pre>\n<p>\nIn this case, we walk through our food_list in order, incrementing our\nwords_before_bagel count every time we see a word that isn't bagel. Once\n'bagel' is finally found, we break out of our loop and the flow of\nexecution moves to the first statement after the loop, in this case the\nprint statement.\n</p>\n<p>\nBreak statements can also be used with while loops:\n</p>\n<pre>\ncountdown = 100\nwhile True:\n  if countdown == 0:\n    print 'Blast off!'\n    break\n  print countdown + ' seconds left!'\n  countdown -= 1\n</pre>\n<p>\nIn this example, the while loop is infinite because the value True is always\ntrue. The only way to get out of the loop is to execute break, which happens\nwhen countdown is 0, which happens after 100 iterations of our loop.\n</p>\n\n", "display_name": "break\n"}, "unaryop": {"explanation": "In Python, we can use the \"unary minus\" to negate a number:\n<pre>\npos_num = 23\nneg_num = -47\npow_num = -4**2\n</pre>\nThe exponentiation operator takes precedence over the negation\noperator if the negation operator is on its left. So in the\nabove example, the value of pow_num is -16.\n", "display_name": "unary operations\n"}, "func_enumerate": {"explanation": "The <b>enumerate function</b> helps us keep track of item indices as we iterate\nthrough a string or list in a for loop:\n<pre>\nstring_list = ['One fish', 'Two fish', 'Red fish', 'Blue fish']\nfor i, word_pair in enumerate(string_list):\n  if word_pair == 'Red fish':\n    print \"The index of 'Red fish' is \" + i\n</pre>\n<p>\nThe above code will print \"The index of 'Red fish' is 2\", since the string\n\"Red fish\" is at index 2 in the string_list.\n</p>\n<p>\nWe can use the enumerate function in conjunction with the modulus operator to\nhandle iteration over every nth item of some list:\n</p>\n<pre>\nnum_list = [-8, 47, 3, -5, 23]\nevery_other_sum = 0\nfor i, num in enumerate(num_list):\n  if i % 2 == 0:\n    every_other_sum += num\nprint every_other_sum          # prints 18 (since -8+3+23=18)\n</pre>\n<p>\nThis code steps through every number in num_list, and whenever the\nlist index i (aka the list position) of that number is even, it adds the number\nto our sum. Therefore our final sum consists of the numbers at positions 0, 2,\nand 4 of num_list.\n</p>\n", "display_name": "enumerate function\n"}, "func_upper": {"explanation": "<p>\nThe <b>lower function</b> converts a string to all lowercase letters:\n</p>\n<pre>\nlower_word = 'jELLo23'.lower()\nprint lower_word             # prints 'jello23'\n</pre>\n<p>\nAny lowercase letters or non-alphabet characters in the string remain unchanged.\n</p>\n<p>\nThe <b>upper function</b> converts a string to all uppercase letters:\n</p>\n<pre>\nupper_word = 'jELLo23'.upper()\nprint upper_word             # prints 'JELLO23'\n</pre>\n<p>\nAny uppercase letters or non-alphabet characters in the string remain unchanged.\n</p>\n", "display_name": "upper function\n"}, "func_chr": {"explanation": "The <b>chr function</b> takes an integer i as an argument and\nreturns a string of a single character whose ASCII code is i:\n<pre>\nsome_char = chr(97)\nprint some_char          # prints 'a'\nanother_char = chr(74)\nprint another_char       # prints 'J'\n</pre>\n<p>\nThe argument must be in the range [0..255], inclusive; ValueError will be raised\nif i is outside that range.\n</p>\n<p>\nHere's a table mapping characters to their ASCII codes (we are only\nconcerned with the \"Dec\" and \"Chr\" columns):\n<a href=\"http://www.asciitable.com\">http://www.asciitable.com</a></p>\nThe <b>ord function</b> takes a string of length one as an argument and returns\nits ASCII code as an integer:\n<pre>\nsome_ascii_code = ord('a')\nprint some_ascii_code          # prints 97\nanother_ascii_code = ord('J')\nprint another_ascii_code       # prints 74\n</pre>\n<p>\nThe ord function is the inverse of the chr function. So, if i is an integer,\nwe know ord(chr(x)) simply returns i back to us, and if ch is a character,\nwe know chr(ord(chr)) simply returns ch back to us.\n</p>\n\n\n", "display_name": "chr function\n"}, "mult": {"explanation": "<a href=\"http://www.greenteapress.com/thinkpython/thinkCSpy/html/chap02.html#6\">http://www.greenteapress.com/thinkpython/thinkCSpy/html/chap02.html#6</a>\n<a href=\"http://www.greenteapress.com/thinkpython/thinkCSpy/html/chap08.html#6\">http://www.greenteapress.com/thinkpython/thinkCSpy/html/chap08.html#6</a>\n", "display_name": "multiplication\n"}, "mod": {"explanation": "<a href=\"http://www.greenteapress.com/thinkpython/thinkCSpy/html/chap04.html#1\">http://www.greenteapress.com/thinkpython/thinkCSpy/html/chap04.html#1</a>\n", "display_name": "modulus operator\n"}, "func_join": {"explanation": "<p>\nThe <b>split function</b> breaks a string into a list of words. By default, any\n number of whitespace characters is considered a word boundary:\n</p>\n<pre>\n>>> song = \"The rain in Spain...\"\n>>> print song.split()\n['The', 'rain', 'in', 'Spain...']\n</pre>\n<p>\nAn optional argument called a delimiter can be used to specify which characters\nto use as word boundaries. The following example uses the string 'ai' as the\ndelimiter:\n</p>\n<pre>\n>>> print song.split('ai')\n['The r', 'n in Sp', 'n...']\n</pre>\n<p>\nNotice that the delimiter doesn't appear in the list.\n</p>\n<p>\nThe <b>join function</b> is the inverse of split. You call it on a delimiter\nstring, and it takes a list of strings and concatenates the elements with that\ndelimiter between each pair:\n</p>\n<pre>\n>>> list = ['The', 'rain', 'in', 'Spain...']\n>>> print ' '.join(list)\nThe rain in Spain...\n</pre>\n<p>\nWe can specify any string as our delimiter to insert between elements:\n</p>\n<pre>\n>>> print '_'.join(list)\n'The_rain_in_Spain...'\n</pre>\n<p>\nAs an exercise, describe the relationship between ' '.join(song.split()) and song. Are they the same for all strings? When would they be different?\n</p>\n", "display_name": "join function\n"}, "name": {"explanation": "<a href=\"http://www.greenteapress.com/thinkpython/thinkCSpy/html/chap02.html#2\">http://www.greenteapress.com/thinkpython/thinkCSpy/html/chap02.html#2</a>\n<a href=\"http://www.greenteapress.com/thinkpython/thinkCSpy/html/chap06.html#1\">http://www.greenteapress.com/thinkpython/thinkCSpy/html/chap06.html#1</a>\n", "display_name": "name\n"}, "noteq": {"explanation": "<a href=\"http://www.greenteapress.com/thinkpython/thinkCSpy/html/chap04.html#2\">http://www.greenteapress.com/thinkpython/thinkCSpy/html/chap04.html#2</a>\n<a href=\"http://www.greenteapress.com/thinkpython/thinkCSpy/html/chap07.html#5\">http://www.greenteapress.com/thinkpython/thinkCSpy/html/chap07.html#5</a>\n", "display_name": "not equal\n"}, "list": {"explanation": "<a href=\"http://www.greenteapress.com/thinkpython/thinkCSpy/html/chap08.html\">http://www.greenteapress.com/thinkpython/thinkCSpy/html/chap08.html</a>\n", "display_name": "lists\n"}, "assign": {"explanation": "<a href=\"http://www.greenteapress.com/thinkpython/thinkCSpy/html/chap02.html#2\">http://www.greenteapress.com/thinkpython/thinkCSpy/html/chap02.html#2</a>\n<a href=\"http://www.greenteapress.com/thinkpython/thinkCSpy/html/chap06.html#1\">http://www.greenteapress.com/thinkpython/thinkCSpy/html/chap06.html#1</a>\n", "display_name": "assignment\n"}, "while": {"explanation": "<a href=\"http://www.greenteapress.com/thinkpython/thinkCSpy/html/chap06.html#2\">http://www.greenteapress.com/thinkpython/thinkCSpy/html/chap06.html#2</a>\n", "display_name": "while loop\n"}, "func_items": {"explanation": "<a href=\"http://www.greenteapress.com/thinkpython/thinkCSpy/html/chap10.html#2\">http://www.greenteapress.com/thinkpython/thinkCSpy/html/chap10.html#2</a>\n", "display_name": "items function\n"}, "lte": {"explanation": "<a href=\"http://www.greenteapress.com/thinkpython/thinkCSpy/html/chap04.html#2\">http://www.greenteapress.com/thinkpython/thinkCSpy/html/chap04.html#2</a>\n<a href=\"http://www.greenteapress.com/thinkpython/thinkCSpy/html/chap07.html#5\">http://www.greenteapress.com/thinkpython/thinkCSpy/html/chap07.html#5</a>\n", "display_name": "less than or equal\n"}, "div": {"explanation": "<a href=\"http://www.greenteapress.com/thinkpython/thinkCSpy/html/chap02.html#6\">http://www.greenteapress.com/thinkpython/thinkCSpy/html/chap02.html#6</a>\n<a href=\"http://www.greenteapress.com/thinkpython/thinkCSpy/html/chap03.html#3\">http://www.greenteapress.com/thinkpython/thinkCSpy/html/chap03.html#3</a>\n", "display_name": "division\n"}, "func_replace": {"explanation": "The <b>replace function</b> replaces all occurences of some substring inside a\nlarger string:\n<pre>\n>>> some_string = 'She sells seashells on the sea shore'\n>>> print some_string.replace('sea', 'bay')\nShe sells bayshells on the bay shore\n>>> grocery_list = 'eggs milk bread bananas and sugar'\n>>> print grocery_list.replace(' ', ',')\neggs,milk,bread,bananas,and,sugar\n", "display_name": "replace function\n"}, "or": {"explanation": "<a href=\"http://www.greenteapress.com/thinkpython/thinkCSpy/html/chap04.html#3\">http://www.greenteapress.com/thinkpython/thinkCSpy/html/chap04.html#3</a>\n", "display_name": "or\n"}, "func_str": {"explanation": "<a href=\"http://www.greenteapress.com/thinkpython/thinkCSpy/html/chap03.html#2\">http://www.greenteapress.com/thinkpython/thinkCSpy/html/chap03.html#2</a>\n", "display_name": "str function\n"}, "dict": {"explanation": "<a href=\"http://www.greenteapress.com/thinkpython/thinkCSpy/html/chap10.html\">http://www.greenteapress.com/thinkpython/thinkCSpy/html/chap10.html</a>\n", "display_name": "dictionaries\n"}}