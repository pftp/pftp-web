[{
  "prompt": "Print the string \"hey\"",
  "hint": "The syntax to print the string \"Hello, world!\" is<br><pre>print \"Hello, world!\"</pre>",
  "concepts": ["print","str"],
  "test_cases": {"":"hey\n"},
  "solution": "print \"hey\""
},{
  "prompt": "Print the string \"Lighthouses rule!!!\"",
  "hint": "The syntax to print the string \"Hello, world!\" is<br><pre>print \"Hello, world!\"</pre>",
  "concepts": ["print","str"],
  "test_cases": {"":"Lighthouses rule!!!\n"},
  "solution": "print \"Lighthouses rule!!!\""
},{
  "prompt": "Print the number -7",
  "hint": "The syntax to print the number 23 is<br><pre>print 23</pre>",
  "concepts": ["print","num"],
  "test_cases": {"":"-7\n"},
  "solution": "print -7"
},{
  "prompt": "Print the string \"Can you dig it?\" and then the string \"Oh yeah\" on the next line",
  "hint": "The syntax to print the string \"Hello, world!\" and then the number 23 on the next line is<br><pre>print \"Hello, world!\"\nprint 23</pre>",
  "concepts": ["print","str","print-mult"],
  "test_cases": {"":"Can you dig it?\nOh yeah\n"},
  "solution": "print \"Can you dig it?\"\nprint \"Oh yeah\""
},{
  "prompt": "Print the numbers 11, 21, and 1211 on consecutive lines",
  "hint": "The syntax to print the string \"Hello, world!\" and then the number 23 on the next line is<br><pre>print \"Hello, world!\"\nprint 23</pre>",
  "concepts": ["print","num","print-mult"],
  "test_cases": {"":"11\n21\n1211\n"},
  "solution": "print 11\nprint 21\nprint 1211"
},{
  "prompt": "Print (7 times (24 plus 81) minus 9) divided by 11",
  "hint": "The syntax to print 47 minus ((3 plus 3) times 7 divided by 2) is<br><pre>print 47 - ((3 + 3) * 7 / 2)</pre>",
  "concepts": ["print","num","num-ops"],
  "test_cases": {"":"66\n"},
  "solution": "print (7 * (24 + 81) - 9) / 11"
},{
  "prompt": "Print 1111 plus ((22 times 33) divided by 121) minus 50",
  "hint": "The syntax to print 47 minus ((3 plus 3) times 7 divided by 2) is<br><pre>print 47 - ((3 + 3) * 7 / 2)</pre>",
  "concepts": ["print","num","num-ops"],
  "test_cases": {"":"1067\n"},
  "solution": "print 1111 + 22 * 33 / 121 - 50"
},{
  "prompt": "Print the string \"sub\" concatenated with the string \"liminal\"",
  "hint": "The syntax to print the string \"happy\" concatenated with the string \"ness\" is<br><pre>print \"happy\" + \"ness\"</pre>",
  "concepts": ["print","str","add-str"],
  "test_cases": {"":"subliminal\n"},
  "solution": "print \"sub\" + \"liminal\""
},{
  "prompt": "Print the strings \"book\", \"keep\", and \"er\" concatenated together",
  "hint": "The syntax to print the string \"happy\" concatenated with the string \"ness\" is<br><pre>print \"happy\" + \"ness\"</pre>",
  "concepts": ["print","str","add-str"],
  "test_cases": {"":"bookkeeper\n"},
  "solution": "print \"book\" + \"keep\" + \"er\""
},{
  "prompt": "Print the string \"hey!\" repeated 5 times",
  "hint": "The syntax to print the string \"hello\" repeated 4 times is<br><pre>print \"hello\" * 4</pre>",
  "concepts": ["print","str","mul-str","num"],
  "test_cases": {"":"hey!hey!hey!hey!hey!\n"},
  "solution": "print \"hey!\" * 5"
},{
  "prompt": "Print the string \"racecar\" repeated 3 times",
  "hint": "The syntax to print the string \"hello\" repeated 4 times is<br><pre>print \"hello\" * 4</pre>",
  "concepts": ["print","str","mul-str","num"],
  "test_cases": {"":"racecarracecarracecar\n"},
  "solution": "print \"racecar\" * 3"
},{
  "prompt": "Print the string \"thb\" repeated 6 times",
  "hint": "The syntax to print the string \"hello\" repeated 4 times is<br><pre>print \"hello\" * 4</pre>",
  "concepts": ["print","str","mul-str","num"],
  "test_cases": {"":"thbthbthbthbthbthb\n"},
  "solution": "print \"thb\" * 6"
},{
  "prompt": "Set the variable 'cups' equal to the number 6 and then print the value of 'cups' times 23",
  "hint": "The syntax to set the variable 'spam' equal to the number 5 and then print the value of 'spam' plus 10 is<br><pre>spam = 5\nprint spam + 10</pre>",
  "concepts": ["print","var","num","num-ops"],
  "test_cases": {"cups":"6","":"138\n"},
  "solution": "cups = 6\nprint cups * 23"
},{
  "prompt": "Set the variable 'miracle_berries' equal to the string \"limes are delicious\" and print the value of 'miracle_berries'. Then, reassign 'miracle_berries' to \"oranges are even more delicious\" and print the value of 'miracle_berries' again.",
  "hint": "The syntax to set the variable 'my_variable' equal to the string \"not your variable!\", print the value of 'my_variable', reassign 'my_variable' to \"still not your variable!\", and print 'my_variable' again is <br><pre>my_variable = \"not your variable!\"\nprint my_variable\nmy_variable = \"still not your variable!\"\nprint my_variable</pre>",
  "concepts": ["print","var","str","print-mult"],
  "test_cases": {"miracle_berries":"'oranges are even more delicious'","":"limes are delicious\noranges are even more delicious\n"},
  "solution": "miracle_berries = \"limes are delicious\"\nprint miracle_berries\nmiracle_berries = \"oranges are even more delicious\"\nprint miracle_berries"
},{
  "prompt": "Set the variable 'duck' equal to the number 85 and 'goose' equal to the number 9001. Print the value of 'duck' plus 'duck' plus 'goose' and then print the value of 'duck' times 'duck' times 'goose' on the next line.",
  "hint": "The syntax to set the variable 'spam' equal to the number 5 and then print the value of 'spam' plus 10 is<br><pre>spam = 5\nprint spam + 10</pre>",
  "concepts": ["print","var","num","num-ops","print-mult"],
  "test_cases": {"duck":"85","goose":"9001","":"9171\n65032225\n"},
  "solution": "duck = 85\ngoose = 9001\nprint duck + duck + goose\nprint duck * duck * goose"
},{
  "prompt": "Set the variables 'red' equal to 31, 'green' equal to 203, and 'blue' equal to 147. Print the mean (average) of 'red', 'green', and 'blue'",
  "hint": "The syntax to set the variable 'spam' equal to 5 and 'my_variable' equal to 11, and then print the mean of 'spam' and 'my_variable' is<br><pre>spam = 5\nmy_variable = 11\nprint (spam + my_variable) / 2</pre>",
  "concepts": ["print","var","num","num-ops"],
  "test_cases": {"red":"31","green":"203","blue":"147","":"127\n"},
  "solution": "red = 31\ngreen = 203\nblue = 147\nprint (red + green + blue) / 3"
},{
  "prompt": "Set the variable 'setup' equal to \"Lobster?? \" and the variable 'punch_line' equal to \"But I hardly know her!\". Print the concatenation of 'setup' and 'punch_line'.",
  "hint": "The syntax to set the variable 'q' equal to \"What? \" and 'a' equal to \"YEAH!\", and then print the concatenation of 'q' and 'a' is<br><pre>q = \"What? \"\na = \"YEAH!\"\nprint q + a</pre>",
  "concepts": ["print","var","str","add-str"],
  "test_cases": {"setup":"'Lobster?? '","punch_line":"'But I hardly know her!'","":"Lobster?? But I hardly know her!\n"},
  "solution": "setup = \"Lobster?? \"\npunch_line = \"But I hardly know her!\"\nprint setup + punch_line"
},{
  "prompt": "Write a function called get_one_hundred that returns the number 100",
  "hint": "Here's a function called get_two_hundred that returns the number 200<br><pre>def get_two_hundred():\n    return 200</pre>",
  "concepts": ["func-def","func-return","num"],
  "test_cases": {"get_one_hundred()":"100"},
  "solution": "def get_one_hundred():\n    return 100"
},{
  "prompt": "Write a function called say_hello that returns the string \"hello\"",
  "hint": "Here's a function called say_goodbye that returns the string \"goodbye\"<br><pre>def say_goodbye():\n    return \"goodbye\"</pre>",
  "concepts": ["func-def","func-return","str"],
  "test_cases": {"say_hello()":"'hello'"},
  "solution": "def say_hello():\n    return \"hello\""
},{
  "prompt": "Write a function called bananas that returns the string \"Stop monkeying around!\"",
  "hint": "Here's a function called oranges that returns the string \"Orange you glad I didn't say banana?\"<br><pre>def oranges():\n    return \"Orange you glad I didn't say banana?\"</pre>",
  "concepts": ["func-def","func-return","str"],
  "test_cases": {"bananas()":"'Stop monkeying around!'"},
  "solution": "def bananas():\n    return \"Stop monkeying around!\""
},{
  "prompt": "Write a function called find_product that returns the product of 151 and 57",
  "hint": "Here's a function called find_sum that returns the sum of 12 and 81<br><pre>def find_sum():\n    return 12 + 81</pre>",
  "concepts": ["func-def","func-return","num","num-ops"],
  "test_cases": {"find_product()":"8607"},
  "solution": "def find_product():\n    return 151 * 57"
},{
  "prompt": "Write a function called build_abs that returns the string \"ab\" repeated 6 times",
  "hint": "Here's a function called build_glutes that returns the string \"glute\" repeated 2 times<br><pre>def build_glutes():\n    return \"glute\" * 2</pre>",
  "concepts": ["func-def","func-return","str","mul-str","num"],
  "test_cases": {"build_abs()":"'abababababab'"},
  "solution": "def build_abs():\n    return \"ab\" * 6"
},{
  "prompt": "Write a function called multiply_by_10 that takes a number as an argument and returns the number multiplied by 10",
  "hint": "Here's a function called divide_by_10 that takes a number as an argument and returns the number divided by 10<br><pre>def divide_by_10(x):\n    return x / 10</pre>",
  "concepts": ["func-def","func-return","num","num-ops","func-args"],
  "test_cases": {"multiply_by_10(198)":"1980","multiply_by_10(-7)":"-70","multiply_by_10(0)":"0"},
  "solution": "def multiply_by_10(x):\n    return x * 10"
},{
  "prompt": "Write a function called add_three_nums that takes three numbers as arguments and returns their sum",
  "hint": "Here's a function called multiply_three_nums that takes three numbers as arguments are returns their product<br><pre>def multiply_three_nums(x, y, z):\n    return x * y * z</pre>",
  "concepts": ["func-def","func-return","num","num-ops","func-args"],
  "test_cases": {"add_three_nums(2, -4, 10)":"8","add_three_nums(-12, 83, -111)":"-40","add_three_nums(0, 999, -999)":"0"},
  "solution": "def add_three_nums(x, y, z):\n    return x + y + z"
},{
  "prompt": "Write a function called concat_three_strings that takes three strings as arguments and returns them concatenated together",
  "hint": "Here's a function called concat_two_strings that takes two strings as arguments are returns them concatenated together<br><pre>def concat_two_strings(x, y):\n    return x + y</pre>",
  "concepts": ["func-def","func-return","func-args","str"],
  "test_cases": {"concat_three_strings('green ', ' eggs', ' and ham')":"'green  eggs and ham'","concat_three_strings('a', 'b', 'c')":"'abc'","concat_three_strings('1', '2', '3')":"'123'"},
  "solution": "def concat_three_strings(x, y, z):\n    return x + y + z"
},{
  "prompt": "Write a function called mul_string that takes a string and number as arguments and returns the string repeated the number times",
  "hint": "Here's a function called concat_two_strings that takes two strings as arguments are returns them concatenated together<br><pre>def concat_two_strings(x, y):\n    return x + y</pre>",
  "concepts": ["func-def","func-return","func-args","str","num","mul-str"],
  "test_cases": {"mul_string('art', 3)":"'artartart'","mul_string('doo', 4)":"'doodoodoodoo'","mul_string('da', 5)":"'dadadadada'"},
  "solution": "def mul_string(base_str, num):\n    return base_str * num"
},{
  "prompt": "Write a function called calc_eq that takes four numbers a, b, c, d as arguments and returns (a plus b) times (c minus d)",
  "hint": "Here's a function called calc_eq that takes three numbers a, b, c as arguments and returns (a plus b) times c<br><pre>def calc_eq(a, b, c):\n    return (a + b) * c</pre>",
  "concepts": ["func-def","func-return","func-args","num","num-ops"],
  "test_cases": {"calc_eq(1, 2, 3, 4)":"-3","calc_eq(-5, 10, 102, -4)":"530","calc_eq(23, 47, 15, 57)":"-2940"},
  "solution": "def calc_eq(a, b, c, d):\n    return (a + b) * (c - d)"
},{
  "prompt": "Write a function called bark that returns the string \"woof\". Then call bark and print the result.",
  "hint": "Here we first define the say_hello function, then call it and print the result<br><pre>def say_hello():\n    return \"hello\"\n    \nprint say_hello()</pre>",
  "concepts": ["func-def","func-return","print","func-call","str"],
  "test_cases": {"bark()":"'woof'","":"woof\n"},
  "solution": "def bark():\n    return \"woof\"\n\nprint bark()"
},{
  "prompt": "Write a function called add_5 that takes a number as an argument and returns the number added to 5. Then call add_5 three times, with arguments 3, 150, and -15, and print the result each time.",
  "hint": "Here we first define the subtract_5 function, then call it three times with arguments 2, 40, and -10 and print the result each time<br><pre>def subtract_5(x):\n    return x - 5\n    \nprint subtract_5(2)\nprint subtract_5(40)\nprint subtract_5(-7)</pre>",
  "concepts": ["func-def","func-return","print","func-call","func-args","num","num-ops"],
  "test_cases": {"add_5(0)":"5","":"8\n155\n-10\n"},
  "solution": "def add_5(x):\n    return x + 5\n\nprint add_5(3)\nprint add_5(150)\nprint add_5(-15)"
}]
